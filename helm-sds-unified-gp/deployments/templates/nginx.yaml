---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: logs-nginx-{{ .Release.Namespace }}
  labels:
    type: local
    name: logs-nginx-{{ .Release.Namespace }}
spec:
  storageClassName: manual
  capacity:
    storage: 200Mi
  accessModes:
  - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  hostPath:
    path: "{{ .Values.logs }}/nginx"
    type: DirectoryOrCreate
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: logs-nginx-{{ .Release.Namespace }}
  namespace: {{ .Release.Namespace }}
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 200Mi
  selector:
    matchLabels:
      type: local
      name: logs-nginx-{{ .Release.Namespace }}
  storageClassName: manual
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
  namespace: {{ .Release.Namespace }}
  labels:
    app: nginx
    version: v1
spec:
  replicas: {{ .Values.replica.nginx }}
  selector:
    matchLabels:
      app: nginx
      version: v1
  template:
    metadata:
      labels:
        app: nginx
        version: v1
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - nginx
            topologyKey: "kubernetes.io/hostname"
      initContainers:
      - name: cloner
        image: alpine/git
        env:
        - name: GIT_REPO_LINK
          valueFrom:
            secretKeyRef:
              name: git-secret
              key: gitrepo
        - name: NAMESPACE
          value: "{{ .Release.Namespace }}"
        - name: NAMESPACE_LOGS
          value: "{{ .Release.Namespace_logs_enabled }}"
        imagePullPolicy: IfNotPresent
        command: ['bash','/scripts/configs-copy']
        volumeMounts:
        - name: empty-conf-nginx
          mountPath: /etc/nginx
        - name: vol-cm-nginx-main
          mountPath: /nginx-main/nginx.conf
          subPath: nginx.conf
        - name: vol-cm-nginx-confd
          mountPath: /nginx-confd/default.conf
          subPath: default.conf
        - name: vol-cm-nginx-services
          mountPath: /nginx-services
        - name: vol-cm-nginx-support
          mountPath: /nginx-support
        - name: empty-html
          mountPath: /usr/share/nginx/html
        - name: empty-data
          mountPath: /data
        - name: vol-cm-nginx-copy
          mountPath: /scripts
      containers:
      - name: nginx
        image: {{ .Values.image.nginx }}
        env:
        - name: DEFAULT_TIME_ZONE
          value: "{{ .Values.timezone }}"
        - name: TZ
          value: "{{ .Values.timezone }}"
        imagePullPolicy: IfNotPresent
        readinessProbe:
          tcpSocket:
            port: 18080
          initialDelaySeconds: 30
          periodSeconds: 5
        livenessProbe:
          tcpSocket:
            port: 18080
          initialDelaySeconds: 30
          periodSeconds: 20
        ports:
        - containerPort: 18080
        {{- if eq .Values.resourceApply true }}
        resources:
          limits:
            cpu: '1'
            memory: 3Gi
          requests:
            cpu: '0.5'
            memory: 2Gi
        {{- end }}
        volumeMounts:
        - name: empty-conf-nginx
          mountPath: /etc/nginx
        - name: vol-logs-nginx
          mountPath: /var/seamless/log/nginx
        - name: vol-bi-report-dir
          mountPath: /usr/share/nginx/html/analytics/file
      volumes:
      - name: vol-cm-nginx-main
        configMap:
          name: cm-nginx-main
      - name: vol-cm-nginx-confd
        configMap:
          name: cm-nginx-confd
      - name: vol-cm-nginx-services
        configMap:
          name: cm-nginx-services
      - name: vol-cm-nginx-support
        configMap:
          name: cm-nginx-support
      - name: vol-logs-nginx
        persistentVolumeClaim:
          claimName: logs-nginx-{{ .Release.Namespace }}
      - name: vol-bi-report-dir
        persistentVolumeClaim:
          claimName: bi-report-dir-{{ .Release.Namespace }}
      - name: empty-conf-nginx
        emptyDir: {}
      - name: empty-html
        emptyDir: {}
      - name: empty-data
        emptyDir: {}
      - name: vol-cm-nginx-copy
        configMap:
          name: cm-nginx-copy
      imagePullSecrets:
      - name: {{ .Values.secret }}
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: nginx
  name: svc-nginx
  namespace: {{ .Release.Namespace }}
spec:
  ports:
  - port: 18080
    {{- if eq .Release.Namespace "ers-dev" }}
    nodePort: 30070
    {{- else if eq .Release.Namespace "ers-staging" }}
    nodePort: 31070
    {{- else if eq .Release.Namespace "ers" }}
    nodePort: 32070
    {{- end }}
    targetPort: 18080
  selector:
    app: nginx
  type: NodePort
