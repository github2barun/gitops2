<?xml version="1.0" encoding="UTF-8"?>
<!--
	This is the sample configuration file for the account simulator accounts database
	It basically tells what types of vouchers the simulator will allow contain
	Typically, this file can man times be used "as is" as long as you accept the default voucher id rules, 
	  which simulates a database with all vouchers starting with "123" all having 100 ZAR as balance
-->
<resourcedb:ResourceDatabase
	xmlns:resourcedb="http://www.seamless.se/ResourceDatabase"
	xmlns:seamless="http://www.seamless.se/SeamlessCommon" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.seamless.se/ResourceDatabase ../../utils/src/main/resources/xsd/ResourceDatabase.xsd "
	resetAtStartup="false">
	<!--
		This element contains the database connection that the resource
		database should use to store resources The default element included
		here uses HSQL to store an in-memory database, ie it will not be
		persistent between restarts and does not require and database server
		up and running, which is a very nice default By changing ":mem:" to
		":file:" below the database will be stored in a file instead which
		might be useful sometimes if you want simple persistence.
	-->
	<resourcedb:DatabaseConnection 
		dbDriver="org.hsqldb.jdbcDriver"
		dbURL="jdbc:hsqldb:mem:hsqldb/SimulatedVouchers" 
		username="sa"
		password="" />

	<!--
		This is an example if you would like to connect your resource database
		to a MySQL database instead. Change the database path and login
		options and uncomment the section below in that case, but don't forget
		to comment the above HSQL connection!
	-->
	<!--

		<resourcedb:DatabaseConnection 
			dbDriver="com.mysql.jdbc.Driver"
			dbURL="jdbc:mysql://localhost:3306/Vouchers"
			password="krokuss" 
			username="root" />
	-->

	<!--
		This element contains an optional script that is run when initializing
		an account that was not existing before typically, this is used to
		set default fields on the resource
	-->
	<resourcedb:InitScript>
		<![CDATA[
  	void initResource()
  	{
  		// By default, the balance is 100
	  	resource.setField("balance", new java.math.BigDecimal(100));
	  		
	}
  ]]>
	</resourcedb:InitScript>


	<!--
		This element describes the rules used for account id:s.
		Basically, if a request comes in for an account id that complies with the rules, the account will automatically be created on-the-fly (and persisted)
		This is VERY useful behaviour when testing, since there is no need to create large sets of test numbers in advance!
		
	-->
	<resourcedb:IdRules>
		<resourcedb:RegexpValidation>123.*</resourcedb:RegexpValidation>
	</resourcedb:IdRules>



</resourcedb:ResourceDatabase>
