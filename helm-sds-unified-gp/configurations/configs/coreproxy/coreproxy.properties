#
# CoreProxy properties
#
# $Id$

# Node id for this proxy, required since the proxy now starts doing 
# write transactions (voucher db)
#
node_id=01

eventschedulerconnection.url=http://localhost:8337/eventscheduler

# Configuration for the voucher encryption settings
#
keystore_filename=/opt/seamless/conf/coreproxy/digitalwarehouse.key
keystore_keyname=DigitalWarehouse
keystore_password=hemligt
key_password=hemligt

# WS settings
ws_principal_service_url=http://0.0.0.0:8912/principalService
ws_custom_operations_service_url=http://0.0.0.0:8912/customOperationsService
ws_bundle_operation_service_url=http://0.0.0.0:8912/bundleOperationService
ws_product_service_url=http://0.0.0.0:8912/productService
ws_coreproxy_cen_services_url=http://0.0.0.0:9030/cenServices
ws_coreproxy_voucherdb_url=http://0.0.0.0:8912/voucherDb

ws_coreproxy_voucher_purchase_url=http://0.0.0.0:8912/voucherPurchase
ws_kyc_service_url=http://0.0.0.0:8912/kycService

# Outgoing WS setting
ws_reseller_management.url=http://0.0.0.0:8983/resellerManagement

ws_reseller_mgmt_service_url=http://0.0.0.0:8983/resellerManagement
ws_reseller_tx_service_url=http://0.0.0.0:8983/reseller

# Database settings

db_user=refill
db_password=refill
db_driver=org.mariadb.jdbc.Driver
db_url=jdbc:mariadb://svc-haproxy:4306/Refill
db_stat_interval_seconds=0
db_query_timeout=120
pool_min_size=40
pool_max_size=100



# Proxool properties
db_pool_implementation=proxool
db_pool_proxool_house_keeping_sleep_time=30000
db_pool_proxool_maximum_active_time=3600000
db_pool_proxool_prototype_count=2
db_pool_proxool_simultaneous_build_throttle=40

# DB pool common properties
db_zeroDateTimeBehavior=convertToNull
db_pool_timeout_millis=300000

# Flow control configuration
flowcontrol.default.asynchronous=false
flowcontrol.default.cooldown_time=100
flowcontrol.default.max_parallel_requests=40

# JVM parameters
#
#env.jre.start_heap=128m
#env.jre.max_heap=512m
#env.jre.opts=-Xdebug -Xnoagent -Xrunjdwp:transport=dt_socket,server=y,address=9020,suspend=n

#pricing.accounts.transfer.operator.eur=BOOKKEEPING:OPERATOR_EUR
#pricing.accounts.transfer.commission.eur=BOOKKEEPING:COMMISSION_EUR
#pricing.accounts.transfer.bonus.eur=BOOKKEEPING:BONUS_EUR
#pricing.accounts.transfer.cash.commission.eur=BOOKKEEPING:CASH_COMMISSION_EUR
#pricing.accounts.transfer.cash.eur=BOOKKEEPING:CASH_EUR
#
#pricing.accounts.topup.operator.eur=BOOKKEEPING:OPERATOR_EUR
#pricing.accounts.topup.commission.eur=BOOKKEEPING:COMMISSION_EUR
#pricing.accounts.topup.bonus.eur=BOOKKEEPING:BONUS_EUR
#
#pricing.accounts.voucher.operator=BOOKKEEPING:OPERATOR
#pricing.accounts.voucher.commission=BOOKKEEPING:COMMISSION


# EXCHANGE RATE CONFIGURATION
#
#exchangerate.rate.1.convert_currencies=EUR:DAY
#exchangerate.rate.1.conversion_rate=0.48
#exchangerate.rate.2.convert_currencies=DAY:EUR
#exchangerate.rate.2.conversion_rate=2.8
#exchangerate.rate.rounding_mode=HALF_UP
#exchangerate.rate.rounding_mode=HALF_DOWN
#exchangerate.rate.rounding_mode=FLOOR
#exchangerate.rate.rounding_mode=CEILING

# Should be configured in the following format:
# CURRENCY_ABBREVIATION:ACCOUNT_TYPE:ACCOUNT_ID
#
#exchangerate.account.1=SYP:BOOKKEEPING:EXCH_EUR
#exchangerate.account.2=DAY:BOOKKEEPING:EXCH_DAY


# Support account configuration for admin user
#
support_account.account_id=OPERATOR
support_account.account_type_id=RESELLER


# Authentication levels
# Each level can be assigned an integer that will be returned when resolving
# reseller principals. It's probably a good idea to use the same levels
# across the whole system, in all principal services. A higher number means
# better authentication.
principals.authentication_level.NO_PASSWORD=0
principals.authentication_level.PASSWORD_VERIFIED=1

#  -- Custom operations configuration --
#
# REQUEST_RESELLER_PIN
# 
# pin_guess_level: If a pin is not stored in clear text, then we can attempt to guess it
# The level set also includes all the lower levels.
# 0 means don't guess
# 1 means try common patterns for pins of size 4 or 5
# 2 means brute force all size 4 pins
# 3 means brute force all size 5 pins
customoperation.REQUEST_RESELLER_PIN.pin_guess_level=0


# SMS provider connection, by default assumes kannel is running on the same host with standard configuration
smsprovider.classname=HttpSMSProvider
smsprovider.url=http://svc-haproxy:13013/cgi-bin/sendsms?username=ers&password=recharge
# SMS prefix to be added to the destination number.
smsprovider.to_prefix=+

password_reset_msg=Your new password is {0}

# Path of the dynamic fields properties file
# Dynamic fields for agent/reseller users
dynamic_fields.user.filename=kyc.properties
# Dynamic fields for agent/reseller (as a company)
dynamic_fields.reseller.filename=kyc_reseller.properties

# Voucherdb configuration for setting limits of each distributor for voucher reservation
# The setting can be set for all distributor using id as 'default'.
# If specific distributor has different limit, id should be set as distributor id
voucherdb.distributor.1.id=default
voucherdb.distributor.1.reservationlimit=100
#voucherdb.distributor.2.id=axfood
#voucherdb.distributor.2.reservationlimit=200


enableVoucherKeyIndexing=false
#voucherkey_index_url=http://0.0.0.0:8989/
#httpclient.max_total_connections=200
#httpclient.default_max_connections_per_route=20
#httpclient.max_connections_per_route=50

resellermanagement.contract_auto_creation=false

#Set default reseller type id for delinked reseller.If you donot specify a value then
#delinked reseller type will not change
unlinkResellerDefaultTypeId=pos
#Setting it true will change existing reseller type while linking it to a reseller.
shouldChangeExistingLinkingResellerType=false

## properties to be added if we want to restrict the number of subreseller search from webadmin.
resellermanagement.max_count_of_sub_resellers=10

#Voucher PIN encoding Previously it was new String(decoded_PIN_byte_array) and
#now I have changed it to new String(decoded_PIN_byte_array, encoding). 
#If this voucher_pin_encoding field is empty then the old one being used 
#(i.e new String(decoded_PIN_byte_array))
#voucher_pin_encoding=UTF-8


# Voucherdb configuration for setting limits of each reseller for voucher reservation
# The setting can be set for all reseller using id as 'default'.
# If specific reseller has different limit, id should be set as reseller id
voucherdb.reseller.1.id=default
voucherdb.reseller.1.reservationlimit=2
#voucherdb.reseller.2.id=DIST1
#voucherdb.reseller.2.reservationlimit=5

voucherkey_index_url=http://0.0.0.0:8989/


#########################################################
# Database Settings for Hash Modulus Mechanism
# Galera nodes should be listening on following ports
# In case of different ports please update configs

# Node-1 = 4401
# Node-2 = 4402
# Node-3 = 4403
#########################################################
# For Database traffic Splitting between two dbNodes, where First dbNode as
# act Write DB and Second dbNode as Read DB. If there is only one connection
# then First node as Read and Write DB. If there is more than two connection
# then first two will be consider, then first one is write DB and second one
# is read DB and rest will be discarded.
#########################################################
connection.1.db_user=refill
connection.1.db_password=refill
connection.1.db_driver=org.mariadb.jdbc.Driver
connection.1.db_url=jdbc:mariadb://svc-haproxy:4306/Refill
connection.1.db_stat_interval_seconds=0
connection.1.db_query_timeout=120
connection.1.pool_min_size=40
connection.1.pool_max_size=100

connection.1.db_zeroDateTimeBehavior=convertToNull
connection.1.db_pool_timeout_millis=300000
connection.1.db_autoReconnect=false
connection.1.db_autoCommit=false
connection.1.db_connectTimeout=300000


product.meta.group.1.id = 1
product.meta.group.1.name = CURRENT_PLANS
product.meta.group.1.classifiers = Freedom,Liberty,LibertyGlobal

product.meta.group.2.id = 2
product.meta.group.2.name = FUTURE_PLANS
product.meta.group.2.classifiers = Freedom,Liberty

product.meta.group.3.id = 3
product.meta.group.3.name = DATA_PLANS
product.meta.group.3.classifiers = Addons

product.dynamicmeta.group.1.id=1
product.dynamicmeta.group.1.name=DATA_CONFIRMATION_REQUIRED
product.dynamicmeta.group.1.customparameter=isDataConfirmationRequired:true

##Give the ProductSKU of the products you want to suggest.
##Give "null" value if a product doesn't require any suggestion.
#e.g: BUNDLE_FREEDOM_5<null<BUNDLE_FREEDOM_20<BUNDLE_FREEDOM_30 => Freedom 5 doesn't get any suggested product.
suggestedProductsList=BUNDLE_FREEDOM_5<BUNDLE_FREEDOM_20<BUNDLE_FREEDOM_30<BUNDLE_LIBERTY_120

##sort by menucodes
product.sortBy.supplierReferenceId=true

##delimiter used while storing multiple values in single field in database
database.multiValueField.delimiter=|

# Default user role id when adding new user for reseller thru
# ERSWSResellerManagementLink
resellermanagement.user_role_id=POS
resellermanagement.user.id.length.min=4


resellermanagement.search_resellers.operator.allowed_types=distributor
resellermanagement.search_resellers.distributor.allowed_types=distributor, subdistributor
resellermanagement.search_resellers.subdistributor.allowed_types=subdistributor, reseller
resellermanagement.search_resellers.reseller.allowed_types=reseller

# Default user password when adding new user for reseller thru
# ERSWSResellerManagementLink. This is used only password policy is set to use
# 'Admin defined' password.
resellermanagement.user_password=2009
resellermanagement.web_user_password=20162016

# Auto activation when assigning terminal to reseller thru
# ERSWSResellerManagementLink
resellermanagement.terminal_auto_activation=true

# Default terminal type when adding new terminal for reseller thru
# ERSWSResellerManagementLink.
resellermanagement.terminal_type=Phone

# Default terminal serial flag when adding new terminal for reseller thru
# terminal_serial_auto_generated=true, system will generate for you.
# terminal_serial_auto_generated=false, system will assign MSISDN by default.
# ERSWSResellerManagementLink.
resellermanagement.terminal_serial_auto_generated=false

# Reseller type which have shared account and want skip validation while registering reseller.
# monitored_shared_account_reseller_types=
# ERSWSResellerManagementLink.
resellermanagement.monitored_shared_account_reseller_types=

# Stategy used for id generation
# Possible options: counter_based, reseller_key_based
#
# For counter_based strategy, first value of counter is generated using below
# configuration. Subsequent values are loaded from database. So later change
# in configuration will not affect the generated values of reseller id.
#
# For reseller_key_based strategy, reseller id is always generated using
# below configuration. So change in configuration will affect the generated
# values of reseller id.
#resellermanagement.id_generation=reseller_key_based

# Prefix that will be part of auto generated reseller id.
resellermanagement.id_prefix=RES

# Number of digits for suffix that will be part of
# auto generated reseller id.
#resellermanagement.id_digits=7

# Default user password when performing a user reset for a user having the
# password change policy AdminChange_ResetSMS or AdminChange_ResetEmail.
# with no value then the system generates a password.
# IdServiceImpl
resellermanagement.reset_pin=0000

# Upon de-activating an agent whether a sms notification
# should be sent or not
resellermanagement.sms_on_deactivation=false

# Flag for determining if terminal serial
# should change when updating MSISDN in update reseller call
resellermanagement.update_serial_with_msisdn=false


# There are two kinds of reseller search we can do using
# ERSWSResellerManagementLink.searchResellers():
#
# * a so called classic search where we search among children of the
# parentReseller
# * a search using allowed types mapping for a reseller type of the
# initiatorReseller
#
# Before choosing one of them we check whether initiatorReseller and
# parentReseller exist.
#
# We then look into core.properties for resellermanagement.search_resellers.*
# variables. We want to find out if a variable allowed_types exists for the
# reseller type of initiatorReseller. For example, if reseller type of
# initiatorResellers is 'agent', the property could look like this:
#
# resellermanagement.search_resellers.agent.allowed_types=agent, subagent

resellermanagement.search_resellers.operator.allowed_types=distributor
resellermanagement.search_resellers.distributor.allowed_types=distributor, subdistributor
resellermanagement.search_resellers.subdistributor.allowed_types=subdistributor, reseller
resellermanagement.search_resellers.reseller.allowed_types=reseller

#
# If this allowed_types property doesn't exist for the reseller type of
# initiatorReseller we use the classic search.
#
# In the classic search we first check if parentReseller is a child of
# initiatorReseller or we return an empty result. We then search using the
# specified search criteria.
#
# In the allowed_types search, we look up the reseller types specified in the
# allowed_types property. We will only return resellers of the allowed_types.
#
# If the parentReseller is different from initiatorReseller we assume the search
# should only be performed on children of parentReseller.
#
#resellermanagement.search_resellers.distributor.allowed_types=distributor, agent, subagent
#resellermanagement.search_resellers.agent.allowed_types=agent, subagent

fetch_balance_with_search_reseller=false
fetch_bank_code=false
# Enable or Disable Second Level authentication for web admin  on Block,Deactivate and Freez operations
webadmin.allowSecondLevelAction=false

# Enable or Disable Second Level authentication for web admin on change reseller parent
webadmin.allowSecondLevelActionChangeParent=false

# Length of generated activation code
# Valid values are 1 - 64. Config value not in this range is reset to the default 5.
webadmin.generated_activation_code_length=5

# Enable or disable activation code generation for a terminal linked to a reseller during reseller creation
webadmin.generate_activation_code_on_create=true

# Enable or disable SMS notification during reseller creation
webadmin.send_activationCode_and_pin_notification=true
# If value is true then fetch salt from id_user.salt column
# Else system will calculate from id_users.CreationTime or id_users.last_password_change_time
# Default value is false
use_db_salt_for_password_hashing=false

## Configuration if auth is also required to check from legacy principalService
## This will particularly be used for password mismatch due to jre version
use_legacy_principal_service=false
ws_legacy_principal_service.url=http://localhost:8912/principalService

fetch_account_pay_limit_from_pay_account_limits = false
emailprovider.mail.host=sdsmailrelay.dev.ts
emailprovider.smtp.host=sdsmailrelay.dev.ts
emailprovider.mail.port=25
emailprovider.mail.quitwait=false
emailprovider.mail.transport.protocol=smtp
emailprovider.mail.fromEmailAddress=dayal.manna@seamless.se
emailprovider.mail.fromEmailPassword=
emailprovider.mail.subject=Seamless Alert!


# Generate Short code properties
# leafLevelReseller means leaf reseller type in hierarchy
# leafLevelLimit no of digits for leaf reseller short code
# parentLevelLimit no of digits for parent reseller short code
customoperation.REQUEST_RESELLER_SHORT_CODE.leafLevelReseller=Reseller
customoperation.REQUEST_RESELLER_SHORT_CODE.leafLevelLimit=7
customoperation.REQUEST_RESELLER_SHORT_CODE.leafLevelPrefix=M
customoperation.REQUEST_RESELLER_SHORT_CODE.parentLevelLimit=4
customoperation.REQUEST_RESELLER_SHORT_CODE.parentLevelPrefix=D


# Generate Short code properties
customoperation.REQUEST_RESELLER_SHORT_CODE.1.resellerTypesGroupName=leafLevel
customoperation.REQUEST_RESELLER_SHORT_CODE.1.resellerTypes=Reseller
customoperation.REQUEST_RESELLER_SHORT_CODE.1.resellerDigitLimit=7
customoperation.REQUEST_RESELLER_SHORT_CODE.1.shortCodePrefix=M

range.1.value= 0.0206
range.1.type=Data_Bundle
range.1.min = 0.33
range.1.max = 1.99

range.2.value= 0.0172
range.2.type=Data_Bundle
range.2.min = 2
range.2.max = 2.99

range.3.value= 0.0063
range.3.type=Data_Bundle
range.3.min = 3
range.3.max = 3

range.4.value= 0.0082
range.4.type=Data_Bundle
range.4.min = 3.01
range.4.max = 5

range.5.value= 0.0120
range.5.type=Data_Bundle
range.5.min = 5.01
range.5.max = 9.99

range.6.value= 0.0102
range.6.type=Data_Bundle
range.6.min = 10
range.6.max = 10

range.7.value= 0.0120
range.7.type=Data_Bundle
range.7.min = 10.01
range.7.max = 99.99

range.8.value= 0.0091
range.8.type=Data_Bundle
range.8.min = 100
range.8.max = 199.99

range.9.value= 0.0054
range.9.type=Data_Bundle
range.9.min = 200
range.9.max = 299.99

range.10.value= 0.0027
range.10.type=Data_Bundle
range.10.min = 300
range.10.max = 349.99

range.11.value= 0.0021
range.11.type=Data_Bundle
range.11.min = 350
range.11.max = 398.99

range.12.value= 0.0018
range.12.type=Data_Bundle
range.12.min = 399
range.12.max = 399

# BCrypt configs
# The exponent gives the number of iterations or rounds of the algorithm
# If the exponent is n, there will be 2^n iterations
# It should be an integer, at least 4 and at most 31
bcryptNumRoundsExponent=8

resellermanagement.resetpin_change_password_required=false
#persist password for PlainTextPassword. These ID values for formats are from Enum PasswordFormat
resellermanagement.persist_password_formats=0

# Config to fetch ldap user role locally
ldap.fetchAdminRoleLocallyForLDAPUser=false

cache.cluster.1.url=redis:
useCache=false
cache.timeout=300000
cache.cluster.namespace=dealer-management-system
reseller.cache.typeid.key.mapping={"RESELLERUSERNAME":"USERID-", "USERID" : "USERID-", "RESELLERUSER":"USERID-" , "RESELLERID":"RESELLERID-", "RESELLER_KEY":"RESELLER_KEY-", "RESELLERMSISDN":"RESELLERMSISDN-"}
token.life=86400
reseller.cache.link.key=RESELLER-LINK-KEY

# If property changed to false, contract id of reseller will be fetched from commission_receivers table.
# Default value is true if not defined and contract id will be fetch from commission_contracts
fetch_contract_info_from_Refill=false

# Admin Operations
adminOperations.getDetailedAdminUserInformation=false
# Below configs are for pin updated of migrated POS resellers. it will work if update_migrated_user_password=true
#update_migrated_user_password=false
#migrated_user_key=isMigrated
#migrated_user_role=POS
#migrated_user_role=POS

# In case, user authentication is successful, system will ignore user's login details into id_users if user exists in exclusion list
#ignore_correct_attempts_user_list=

# Only update id_users when authentication fails irrespective of whether the user is in exclusion list or not.
#ignore_success_update_login_detail=false