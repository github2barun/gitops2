internal.error=Internal Error
operation.unsupported=Operation unsupported : {0}
invalid.principal.provided=Party not resolved with id[{0}]
invalid.principals=Parties couldn't be resolved.
invalid.sender.principal={0} is not resolved with id : {1}
invalid.receiver.principal={0} is not resolved with id : {1}
invalid.initiator.principal={0} is not resolved with id : {1}
invalid.pickup.point=Invalid pickup point with id : {0}
product.not.available=Products are not resolved for : {0}
business.rule.reject.rule=Business rule rejected with rule : {0}
business.rule.validation.error=Failed to validate business logic!
order.create.error=Error in order creation [{0}]
internal.order.create.error=Error in internal order creation under order [{0}]
reserve.inventory.fail=Failed to reserve inventory
transfer.inventory.fail=Failed to transfer inventory
invoice.deletion.fail=Some error occurred during invoice deletion
digital.stock.transfer.fail=Fail to call request transfer service api of TXE
digital.stock.transfer.response.null=Digital stock transfer response null
digital.stock.transfer.response.nonzero=TXE transfer [{0}]
digital.stock.topup.fail=Fail to call request topup service api of TXE
digital.stock.topup.response.null=Request topup service api having response null
digital.stock.topup.response.nonzero=TXE topup [{0}]
digital.stock.revert.fail=Some error occurred during reversal digital stock
request.transfer.revert.fail=Request transfer reversal failed
request.transfer.revert.response.null=Request transfer reversal having response null
request.transfer.revert.response.nonzero=TXE request reversal [{0}]
request.topup.revert.fail=Request topup Reversal failed
request.topup.revert.response.null=Request topup Reversal having response null
request.topup.revert.response.nonzero=TXE request reversal [{0}]
transfer.digital.inventory.fail=Error in transferring digital stock against order[{0}]
release.inventory.fail=Failed release inventory
generate.invoice.fail=Failed to generate invoice
get.invoice.fail=Failed to get invoice
delete.invoice.fail=Failed to delete invoice
update.invoice.fail=Failed to update invoice
save.invoice.fail=Failed to save invoice
invalid.confirmation.action=invalid confirmation confirmationAction provided
invalid.current.state.for.confirmation.action=The order[{0}] is in [{1}] state; not applicable for any confirmationAction
reserved.inventory.not.found=No reserved inventory found against ref-no [{0}]
perform.order.action.error=Error occurred in performing [{0}] action for Order [{1}]
update.inventory.fail=Failed to update inventory
delete.order.fail=Failed to delete order [{0}]
delete.internal.order.fail=Failed to delete internal orders under order [{0}]
return.order.no.inventory.found=No inventory found to return in the orders
return.order.product.sku.invalid=The product skus to return are not valid
system.token.invalid=System Token is not valid
products.search.error=Error To search product [{0}]
order.create.success=Order created successfully with id[{0}]
order.create.success.erp.fail=Order created successfully with id[{0}] but erp order not created.
orders.complete.not.found=No complete orders not found with id(s) : [{0}] with seller [{1}] and buyer [{2}]
product.not.resolved=Products not resolved
order.create.state.not.found=order creation state [{0}] not found
order.return.reason.not.found=Return reason must be provided
order.return.type.not.found=Invalid return type provided
order.return.details.not.found=No details provided for orders/items to return
order.state.transition.not.found=No valid transition found from {0} to {1} For order
order.return.partial.invalid.item.row=Either serial/range/batch should be provided for PARTIAL return orders
order.return.serialized.partial.invalid.item.row=Either serial/range/batch should be provided for serialized product in PARTIAL return orders
order.return.trackable.non.serialized.partial.invalid.item.row=Range should be provided for trackable non-serialized product in partial return orders
order.return.non.serialized.partial.invalid.item.row=Quantity should be provided for non-serialized product in partial return orders
order.return.non.serialized.excess.quantity=Excess quantity is provided for non-serialized product in partial return orders
order.return.product.type.not.supported=Return is not applicable on product sku {0} which is type of {1}
order.seller.invalid=Invalid sender information provided: [{0}]
order.return.partial.invalid.quantity=Cannot return more than actual returnable quantity
order.buyer.invalid=Invalid buyer information provided: [{0}]
return.order.create.success=Return order placed successfully with id[{0}]
order.confirmation.action.success=Order confirmed successfully
product.type.not.found=Product type not found with value [{0}]
order.type.invalid=Invalid order orderType provided
order.id.not.found=Order does not exist with id [{0}]
order.details.fetch.success=Successfully fetched orders for user: {0}
order.details.fetch.error=Error in fetching order details
order.details.fetch.error.not.found=No orders found/resolved for the current user
order.details.create.response.error=Error creating response for order id: {}
order.perform.action.reject.reason.mandatory=Reject reason must be provided for Action type [REJECT]
account.transaction.failed=Account transaction failed
order.validation.error=Unexpected error in validate order
order.payment.preset.not.found=No payment preset found for user: {0}
order.invalid.access=Invalid access usage. Values [{0}] are not allowed for user {1}
order.reseller.validation.error=Reseller Type and Reseller Id cannot be null/empty at the same time.
invalid.system.token.initiator.info=Error parsing system token, no initiator information found : {0}
payment.preset.already.exists=Payment preset {0} already exist.
payment.preset.delete.fail=Failed to delete. Payment preset {0} does not exist.
order.type.empty=Order Type cannot be empty or null.
order.invalid.payment.error=Payment mode or agreement cannot be empty
invalid.payment.mode=Invalid payment mode entered
invalid.payment.agreement=Invalid payment agreement entered
order.payment.confirmation.action.required=Please confirm payment for order id {0}, it will confirm your order
credit.commission.fail=Error in crediting commissions against order[{0}]
perform.account.adjustments.fail=Error in making account adjustments against payments for order[{0}]
make.payment.entry.fail=Error in making payment entries for order[{0}]
delete.payment.entry.fail=Error in deleting payment entries for order [{0}]
order.updation.fail=Some error occurred when updating order[{0}]
order.payment.fail.retry.attempt.updation=Order retry attempt count updated to [{0}] for failed payment
order.internal.updation.fail=Error in updating internal orders
external.order.not.allowed=External order booking with procurement type is not allowed
erp.external.order.invalidate.product=Fail to validate product skus [{0}]
erp.external.order.insufficient.balance=Insufficient dealer balance in external system [{0}]
internal.order.not.allowed=Internal order booking with procurement type external is not allowed
erp.external.order.create.error=Error occurred during create external order [{0}] {1}
erp.external.order.fetch.error=Error occurred during fetch external order [{0}]
erp.external.order.fetch.success=External order [{0}] fetched successfully
erp.external.picklist.fetch.error=Error occurred during fetch picklist [{0}]
system.token.missing=System token is missing.
auth.token.missing=Auth token is missing.
order.type.category.information.missing=category information for some of the configured order types is missing
id.list.empty=Id list contains an empty value.
invoice.ineligible.access=Invoice Id:{0} is/are neither initiated or sold by {1}.
invoice.order.not.transferred=Cannot process request as some orders are not transferred for invoice ids: {0}.
invoice.invalid.payer.payee.access=Invoice id:{0} has different payer payee from {1} and {2} respectively.
order.update.state.fail=No valid transition found from {0} to {1} for order [{2}].
settle.invoice.failed=Error occurred while settling invoice.
settle.invoice.not.found=Searched for {0} records, found {1} records.
settle.invoice.no_credit=No Credit to Settle the invoice.
ledger.entry.not.found={0} ledger entry not found for invoice {1}.
mandatory.party.types.missing=Mandatory party-types missing
unit.conversion.type.not.matched=Unit [{0}] can not convert into unit [{1}].
delivery.path.found.empty=Delivery path can not empty for order : {0}.
receivers.found.empty=Receiver can not empty for order : {0}.
party.by.resellerid.fail=Party resolve by reseller id fail, for party id : {0}.
party.by.resellerid.fail.response.null=Party resolve by reseller id response null, for party id : {0}.
party.by.resellerid.fail.response.nonzero=DMS : [{0}]
party.by.reseller.search.fail=Party resolve by reseller search fail, for party id : {0}.
resolve.resellers.failed=Resolve resellers failed. Party IDs: {0}.
resolve.resellers.failed.with.response.null=Resolve resellers returned null response. Party IDs: {0}.
resolve.resellers.failed.with.result-code.nonzero=Resolve resellers returned nonzero result-code. Party IDs: {0}, ResultMessage: {1}.
resolve.resellers.failed.for.some.resellers=Some parties couldn't be resolved. Party IDs: {0}, Result Details: {1}.
party.by.reseller.search.fail.response.null=Party resolve by reseller search response null, for party id : {0}.
party.by.reseller.search.fail.response.nonzero=DMS : [{0}]
party.extra.field.not.found=Additional field not found with name [{0}].
party.extra.field.multiple.found=Multiple values found for additional field with name [{0}].
unique.party.not.found=Unique party not found with provided id/code.
tax.fetch.error=Some error occurs during fetch taxes from PMS.
tax.not.found=Tax definition not found for some tax id in {0}.
order.action.invalid=invalid order action provided, order action can be: {0}.
register.reject.reason.fail=Some error occurred during register reject reason for order [{0}].
piso.create.trip.request.error=Unable to create trip request.
tms.call.error=Error occurred while calling TMS.
product.amount.or.offer.price.negative={0} can not be empty or negative for the corresponding product {1}
product.amount.not.provided=Amount is not provided for the corresponding product {0}
product.unitprice.differ=Same product [{0}] cannot have different unit price.
order.update.success=Order updated successfully
order.return.partial.invalid=Order Item to be returned is invalid.
order.details.multiple.found=Multiple orders found against orderId [{0}] for the current user.
linked.orders.empty=To process return, original order id should be provided
linked.orders.more.than.one=To process return, There should be only one original order.
linked.orders.not.found=Original orders {0} are not eligible for the return
return.items.empty=To process return, items should be provided
delivery.path.required=To process return, delivery path is required
credit.note.deletion.fail=Some error occurred during delete credit note for order {0}
delete.credit.note.fail=Fail to delete credit notes
save.credit.note.fail=Fail to save generated credit note
generate.credit.note.fail=Fail to generate credit note for orderId {0}
update.credit.note.fail=populate commission in credit note failed for seller {0}
get.credit.note.fail=Failed to get credit notes
credit.note.settle.error=Some error occurred during settle credit note for orderId {0}

ipod.internal.order.not.allowed=This order type is only applicable for external orders.
ipod.multiple.item.row.not.allowed=Multiple order item row not allowed for order type IPO_D.
party.is.not.active=You are blocked to use this service. Please contact operator to unblock

payment.reverse.fail=Failed to reverse payment transactions, please contact administration
erp.orders.partial.return.error=ERP based original orders {0} are not eligible for the partial return

### Make Payment properties ###
collect.payment.success=Payments registered.
collect.payment.failed=Failed to register payments.
collect.payment.invalid.invoice=No invoice found with invoice id = [{0}]
collect.payment.payment.mode.invalid=Invalid payment mode [{0}]
collect.payment.amount.invalid=Invalid amount/currency passed in payment {0}
collect.payment.paid.from.invalid=Paid from is missing for payment {0}
collect.payment.paid.to.invalid=Paid to is missing for payment {0}
collect.payment.paidfrom.not.found=Paid from user {0} is not found in payment {1}
collect.payment.paidto.not.found=Paid to user {0} is not found in payment {1}
collect.payment.amount.not.positive=Specified Amount must be positive at paymentNo: {0}
collect.payment.invoice.fullpaid=Invoice id = [{0}] is fully paid. More payment cannot be made against this invoice.
order.types.fetch.success=All Order Types fetched successfully
order.ledger.entry.failed=Failed to save Ledger Entries.
order.ledger.update.failed=Failed to update Ledger Entries.
collect.payment.invoice.incorrect.payee=Payee = [{0}] and seller = [{1}] for Invoice id = [{2}] do not match.
collect.payment.invoice.incorrect.payer=Payer = [{0}] and buyer = [{1}] for Invoice id = [{2}] do not match.
###############################

invalid.external.return.order=Order was booked in ERP, please contact ERP. can not be returned : [{0}]
invalid.payable.return.order=Order was booked as payable. can not be returned : [{0}]


## Order Reason Type
order.reason.types.not.valid=order-reason type is not valid
order.reason.types.fetch.success=Order reason types fetched successfully
order.reason.code.fetch.success=Order reason code fetched successfully
order.reason.codes.fetch.success=All order reason codes fetched successfully
order.reason.code.not.valid=Code does not exist with this order-reason type, provide valid code-type
order.reason.code.delete.success=Order Reason code with type deleted successfully
order.reason.code.already.exist=Code is already exist with this type, choose different code
order.reason.code.create.success=Order reason code with type created successfully

## Pagination Related ##
pagination.per.page=The perPage value should be a positive integer
pagination.page=The page value should be a positive integer
pagination.type.error=Pagination values should be of type number
filter.key.not.valid=filter key is not valid, valid key {0}
sort.key.not.valid=sort key is not valid, valid key {0}
filter.not.valid=please provide valid filter string like [key][operation][value], key can be: {0} operation can be {1}
sort.not.valid=please provide unique/valid sort string like [key]_[operation], key can be: {0} operation can be {1}

## ERS Related ##
sender.account.not.found=Sender account is null for sender id {0}
receiver.account.not.found=Receiver account is null for receiver id {0}
ers.transaction.party.not.found=Sender or Receiver cannot be null or empty


## Confirm Payment API ##
order.confirm.payment.error.paymentmode.ismandatory=The payment-mode must be specified for confirming the payment
order.confirm.payment.error.paymentmode.invalid=Invalid payment-mode[{0}] specified for confirming the payment
order.confirm.payment.error.paidFrom.ismandatory=The payment-making party must be specified(paidFrom)
order.confirm.payment.error.paidTo.ismandatory=The payment-receiving party must be specified(paidTo)
order.confirm.payment.error.invoiceid.invalid=Invoice does not exist with id [{0}]
order.confirm.payment.error.invoiceid.seller.buyer.invalid=Invoice does not exist with id [{0}] for seller[{1}] and buyer[{2}]
order.confirm.payment.error.invoiceid.ordertype.invalid=invalid order orderType[{0}] found against the invoice[{1}]
order.confirm.payment.error.order.rejected=The order against the invoice[{0}] has already been rejected. Payment-confirmation is not applicable
order.confirm.payment.error.order.action.required=Confirm/Reject the order against the invoice[{0}] first. Payment-confirmation is not applicable
order.confirm.payment.error.order.not.applicable=Payment-confirmation is not applicable for the order against the invoice [{0}]
order.confirm.payment.error.paymentagreement.not.applicable=The payment-agreement against the invoice [{0}] is {1}. Payment-confirmation is not applicable
order.confirm.payment.error.payment.retry.attempts.exceeded=The payment-retry attempt limit has been reached. No more attempts left for order[{0}]
order.confirm.payment.error.payment.retry.attempts.exceeded.cancel.order=The payment-retry attempt limit has been reached. No more attempts left for order[{0}]. Order cancelled.
order.confirm.payment.error.order.state.invalid=The order[{0}] has already been transferred and settled. Payment-confirmation is not applicable
order.confirm.payment.error.order.state.failed=The order[{0}] has already been cancelled due to failed payment. Payment-confirmation is not applicable
order.confirm.payment.error.invoiceid.absent=Invoice does not exist for order id [{0}].
order.confirm.payment.order.final.status.fail=Error in updating order status for order[{0}]. Perform it manually
order.confirm.payment.invoice.final.status.fail=Error in updating invoice status for order[{0}]. Perform it manually
order.confirm.payment.success=Payment confirmed for order[{0}] and invoice[{1}]
order.confirm.payment.failed=All adjustments done successfully for order[{0}] and invoice[{1}] but some error in updating internal transactions. Please update it manually.
order.confirm.payment.update.inventory.failed=Failed to transfer inventory.
order.confirm.payment.retry.count.updated=payment retry-attempt updated for order[{0}]. {1} attempts left
calculate.pricing.fail=Fail to calculate pricing
calculate.pricing.fail.response.null=Response from calculate pricing api is NULL
calculate.pricing.fail.response.nonzero=CMS calculate pricing [{0}]
order.confirm.payment.timeout=Payment Confirmation Timed Out.

order.consignment.principal.not.found=incorrect owner-history found for item[{0}] and product sku[{1}]
order.consignment.invoice.status.update.fail=Error in updating invoice status for orders on consignment. Contact ops team
order.consignment.revert.debit.fail=Failed revert consignment-debit.

reserve.type.mismatch=Reserve type mismatch during fetch inventory info using serial-number
product.sku.not.resolved=Product SKU is not resolved for serial-number [{0}]
ims.fetch.inventory.failed=Error occurred during fetch inventory using serial number

## Invoice api ##
unauthorized.user.to.access.invoice=User [{0}] is not the buyer or seller or initiator of the order [{1}]
invoice.request.payer.empty=Payer can't be empty.
invoice.request.payee.empty=Payee can't be empty.
no.invoice.found.for.order=No invoice found for order [{0}]
invoice.user.not.found=[{0}] [{1}] is not found in the system.
invoice.not.found=No invoices found/resolved for the current user.
invoices.fetch.error=Error in fetching invoices
invoices.fetch.success=All invoices fetched successfully
invalid.multiple.operation.in.filter=Invalid multiple operation provided for key {0}

## Create Order transaction API ##
transaction.order.create.error.operationType.ismandatory=Operation Type can't be null.
transaction.order.create.error.operationType.invalid=Invalid operation-type[{0}] specified.
transaction.order.create.error.from.ismandatory=from field can't be null.
transaction.order.create.error.to.ismandatory=to field can't be null.
transaction.order.create.error.tripId.ismandatory=No tripId specified.
transaction.order.create.success=order-transaction created successfully
transaction.order.create.fail=Fail to create order-transaction
transaction.order.details.fetch.error=No Order-Transactions found within the tripId
trip.reconciliation.success=Trip [{0}] reconciled successfully.
trip.with.missing.items.reconciliation.success=Trip [{0}] with missing items/cash reconciled successfully.
trip.reconciliation.fail=Failed to reconcile trip[{0}]
transaction.order.create.error.amount.ismandatory=amount can't be null.
transaction.order.create.error.amount.positive=Specified Amount must be positive.

collect.stock.transaction.not.found=Collect Stock Transaction not found before [{0}]
collect.payment.transaction.not.found=Collect Payment Transaction not found before [{0}]
internal.order.not.found=Internal Orders not found with ids {0}
order.not.found=Orders not found with ids {0}

## FetchPayment API
payment.details.fetch.error=Error in fetching payment details
payment.details.fetch.success.not.found=No payment Found.
payment.details.fetch.success.found=Fetched payment details successfully.

## Order additional fields ##
additional.field.missing=Some of the required fields are missing: [{0}]
additional.field_value.missing=Value for required files is missing: [{0}]
parent.party.additional.field.missing=Required field not found in parent reseller : [{0}]
required.additional.field.empty.error=Required Additional Fields are either empty or null
additional.field.empty.error=Additional Fields are either empty or null
dms.additional.field.error=Failed to get buyer data from transaction
erp.operation.additional.field.not.resolved=Can not send request to ERP for operation[{0}]. {1}

## Upload inventory ##
external.id.empty.error=External Id cannot be null or empty
product.empty.error=Product info cannot be null or empty
sku.empty.error=Product SKU cannot be null or empty
serial.range.empty.error=Serials and ranges cannot be null or empty at the same time
batchId.empty.error=BatchId cannot be null or empty
order.not.found.with.external.id=No order entity found for external id:[{0}]
order.found.invalid.with.external.id=No valid order transaction found for external id:[{0}]
order.item.row.not.found.external.id=Product not found with SKU[{0}] in external order
order.item.product.not.found.in.order=Product sku[{0}] being uploaded is not a part of the order [{1}]
error.reconcile.inventory.with.erp=Error occurred during reconciliation of inventory for order [{0}]
error.raise.order=Error in raise order
valid.order.transaction.not.found=No valid order transaction found

######### Business Rules ###########
applicable.commission.rule.not.permit.error=Commission is not applicable [{0}]
applicable.commission.rule.missing.commission_partner=CommissionPartner must not have empty seller or buyer [{0}]
applicable.commission.rule.type_relations.pattern.mismatch=Failed to match pattern for type_relations [{0}]
applicable.product.rule.missing.product.details=Product-types, Product-categories, and Product-skus cannot be empty [{0}]
applicable.product.rule.type_relations.pattern.mismatch=Failed to match pattern for type_relations [{0}]

child.access.rule.missing.initiator=Request Initiator should not be blank [{0}]

order.book.rule.not.permit.error=Order book failed as it is not applicable [{0}]
order.book.rule.missing.procurementType.error=ProcurementType cannot be empty [{0}]
order.book.rule.missing.invoice.datasource.error=Invoice data source cannot be empty [{0}]
order.book.rule.invalid.update_party_with_parent=Invalid party found to be updated with its parent [{0}]
order.book.rule.type_relations.pattern.mismatch=Failed to match pattern for type_relations [{0}]
order.book.mandatory.additional.fields.not.provided=Please provide mandatory additional fields {0} for ERP order

delivery.option.override.rule.not.permit.error=Delivery option override failed as it is not applicable [{0}]
delivery.option.override.rule.type_relations.pattern.mismatch=Failed to match pattern for type_relations [{0}]

order.confirmation.rule.missing.party=Values of both can reject and can confirm cannot be empty when confirmation is required [{0}]

party.hierarchy.check.unknown.party.type=Party type {0} is not supported in rule [{1}]
party.hierarchy.check.invalid.party=Parent party or Sub party is not resolved in rule [{0}]
party.hierarchy.check.invalid.sub_party=Both Parties [{0},{1}] are not in a same hierarchy in rule [{2}]
party.hierarchy.check.error=Exception occurred in party hierarchy check [{0}]

payment.confirmation.invalid.invoice.state=Invalid invoice final status provided [{0}]
payment.confirmation.invalid.type_relations=Failed to match pattern for type_relations [{0}]

region.check.error=Exception occurred in region check [{0}]

update.order.item.fail=Update order item failed

applicable.product.rule.invalid.product.purchase=Sorry, you are not allowed to purchase products between {0}({1}) and {2}({3})
applicable.product.rule.invalid.taxation.type=Sorry, you cannot purchase products between {0}({1}) and {2}({3}) as taxation type is not configured

pretup.item.row.invalid=Pretup should contain single item row with quantity one
order.external.registered=Order created and successfully registered in ERP with id[{0}]

min.recharge.comparison.failed=Failed to compare min-recharge value with transaction amount

dealer.status.check.invalid.state=Failed {0} rule, {1} with status {2} is not allowed for this transaction.

## Order Product Quota Business Rule
order.quantity.multiple.rule.failed=Ordered quantity [{0}] multiple of rule is failed for product {1}, The quantity should be multiple of [{2}]
order.quantity.hourly.limit.invalid=Hourly limit not found for reseller {0} against product [{1}] with quota type [{2}]
order.quantity.hourly.limit.reached=Hourly limit {0} has been reached during the order for reseller {1} against product [{2}] with quota type {3}, either increase hourly limit or raise order on next hour
order.quantity.daily.limit.invalid=Daily limit not found for reseller {0} against product [{1}] with quota type [{2}]
order.quantity.daily.limit.reached=Daily limit {0} has been reached during the order for reseller {1} against product [{2}] with quota type {3}, either increase daily limit or raise order on next day
order.quantity.weekly.limit.invalid=Weekly limit not found for reseller {0} against product [{1}] with quota type [{2}]
order.quantity.weekly.limit.reached=Weekly limit {0} has been reached during the order for reseller {1} against product [{2}] with quota type {3}, either increase weekly limit or raise order on next week
order.quantity.monthly.limit.invalid=Monthly limit not found for reseller {0} against product [{1}] with quota type [{2}]
order.quantity.monthly.limit.reached=Monthly limit {0} has been reached during the order for reseller {1} against product [{2}] with quota type {3}, either increase monthly limit or raise order on next month

order.item.rows.not.found=No items/products specified in order

order.reverse.update.ledger.error=Failed to update ledger records for order id: [{0}]
order.reverse.update.payment.error=Failed to update payment status for order id: [{0}]
order.reverse.update.inventory.error=Failed to update inventory for order id: [{0}]
order.reverse.invalid.order.state.error=Order with order id: [{0}] is in invalid state for reversal
order.reverse.update.internal_order.error=Failed to update internal orders for order id: [{0}]
order.reverse.update.invoice.error=Failed to update invoices for order id: [{0}]
order.reverse.unsupported.topup=Order id: [{0}] has topup associated which cannot be reversed

applicable.section.restriction.rule.not.permit.error=Section restriction rule is not applicable [{0}]
applicable.section.restriction.type_relations.pattern.mismatch=Failed to match pattern for type_relations [{0}]
applicable.section.restriction.rule.association.field.not.null=Section restriction rule must have association for seller or sender [{0}]
applicable.section.restriction.rule.section.field.not.null=Section restriction rule must have section for receiver or buyer [{0}]
applicable.section.restriction.rule.section.field.notin.association=Section does not exist in association list [{0}]

buyers.not.empty=Buyer list should not be empty
buyer.id.not.blank=Buyer id should not be blank
seller.not.blank=Seller id should not be blank
total.due.and.unused.fetch.success=Total due and unused credit fetched successfully
total.due.and.unused.fetch.fail=Some error occurred during fetch total due and unused credit

payment.mpesa.initiate.payment.success=MPesa payment initiated for order[{0}]
payment.mpesa.initiate.payment.fail=Failed to register mPESA payment in external system
payment.mpesa.fetch.status.fail=Failed to fetch mPESA payment status from external system
payment.mpesa.payment.invalid.state=Current state[{0}] for order[{1}] is not applicable for Mpesa payment processing
payment.id.not.found=Payment entry does not exist with id [{0}]
payment.id.not.found.payment.id=No payment found for payment id [{0}]
payment.id.not.found.order.id=No order found for payment id [{0}}]
ledger.entry.not.found.payment=No eligible ledger entry found for payment id {0}.
payment.external.type.not.found=External payment id type must be provided
payment.external.type.invalid=External payment id type is invalid {0}
payment.entry.creation.failed=Error in creating payment entry

fetch.subscriber.data.fail=Some error occurred to fetch subscriber data
default.subscriber.account.id.null=Please set default subscriber account id in properties (subscriber.management.default.account.id)
idtype.searchtype.mapping.property.not.found=Properties not found, please set party.resolve.reseller.idtype.searchtype.mapping properties

invalid.liked.order.ids=Must provide linked order ids with transfer state, ie {0}

order.reversed.success=Order with order id: {0} successfully reversed.
order.reversed.wait.confirm=Order with order id: {0} wait for confirmation.

order.get.returnable.item.details.success=Successfully fetched returnable items of order {0}
orders.not.have.same.sender=All order should have same sender
orders.not.have.same.last.receiver=All order should have same last receiver

parent.access.rule.missing.initiator=Request Initiator should not be blank [{0}]
parent.access.rule.missing.parentId=Parent party cannot be empty [{0}]

external.inventory.populate.fail=Failed to populate external inventory
external.inventory.list.null=Please provide inventory list for product sku [{0}]
external.inventory.quantity.null=External inventory quantity should not be null for non serialised
external.inventory.not.mixed=External inventory should be either batch or instance not mixed for serialised
external.inventory.batch.start.serial.null=External inventory should contain start serial number for serialised batch
external.inventory.batch.end.serial.null=External inventory should contain end serial number for serialised batch
external.inventory.single.serial.null=External inventory should contain serial number for serialised
external.inventory.parse.json=Failed to parse json expression for inventory list
external.inventory.list.validate.failed=Failed to validate external inventory list
external.inventory.delete.fail=Failed to delete external inventory

make.ledger.debit.entry.fail=Error in updating the ledger balance for invoice of order[{0}]. Contact ops team
settle.invoice.payment.entry.fail=No payment found against the invoice[{0}]
settle.invoice.payment.entry.create.fail=Error in creating invoice-payment settlement entries
collect.payment.transaction.error.invoice.not.found=No invoice id resolved with the provided id[{0}], payer[{1}] and payee[{2}] information
order.invoice.payment.settlement.create=Error in adding mapping of invoice and payments for order[{0}]. Contact ops team

## Credit note api ##
unauthorized.user.to.access.credit.note=User [{0}] is not the buyer or seller or initiator of the order [{1}]
no.credit.note.found.for.order=No credit note found for order [{0}]
credit_notes.fetch.error=Error in fetching credit notes
credit_notes.fetch.success=All credit notes fetched successfully
update.inventory.for.trip.fail=Failed to mark inventory against trip[{0}]
piso.update.inventory.for.trip.fail=Order[{0}] raised successfully but error in marking the inventory against the corresponding PISO trip
ims.fetch.inventory.owner.blank=Owner information not provided, cannot fetch inventory
ims.fetch.inventory.by.inventory.type.error=Error in fetching inventory of type[{0}}] under owner[{1}] with the provided attributes

## Order Product Quota Rule
order.product.quota.for.invalid=Order product quotaFor [{0}] is not valid
order.product.quota.rule.already.exist=Order product quota rule already exist against resellerId: [{0}], productSKU: [{1}] and quotaFor: [{2}]
order.product.quota.rules.fetch.success=All order product quota rules fetched successfully
order.product.quota.rule.not.exist=Order product quota rule does not exist against rule id [{0}]
order.product.quota.rule.delete.success=Order product quota rule deleted successfully
order.product.quota.rule.fetch.success=Order product quota rule fetched successfully
order.product.quota.rule.create.success=Order product quota rule created successfully
order.product.quota.rule.update.success=Order product quota rule updated successfully
order.product.quota.rule.limit.nonzero=At least one of the product quota's limit and multipleOf should be greater than zero

promotional.material.reserve.inventory.fail=Fail to reserve promotional materials inventory for order {0}

due.and.unused.payment.fetch.rule.missing.initiator=Request Initiator should not be blank [{0}]
due.and.unused.payment.fetch.rule.sellers.mismatch={1} are not allowed to fetch due and unused payment for access level {2} for rule : [{0}]

order.reference.generation.fail=Error in generating unique reference number
order.internal.invalid.state=Internal order is in invalid state for reschedule delivery order operation
order.internal.order.invalid.state=Order is in invalid state for reschedule delivery order operation
order.internal.view.invalid.state=Cannot process internal orders that are not in state: [{0}]
order.internal.view.fail=Failed to get order internal view
order.internal.not_found=No internal orders found with ids: [{0}]
order.internal_id.blank=Internal order ids cannot be null or empty
order.internal.failed=Failed to reschedule delivery order
order.internal.create.fail=Failed to create internal order
order.internal.replacement.not.found=Replacement items not found for some missing items for internal order id: [{0}]
order.internal.replacement.quantity.mismatch=Replacement items quantity does not match with missing item quantity for internal order id: [{0}]
order.internal.view.fetch.success=Order internal view fetched successfully
#0-success list, 1-fail list, 2-success count, 3-fail count
order.internal.reschedule.success=Reschedule request processed successfully for [{0}] and failed for [{1}]

payment.fetch.rule.missing.initiator=Request Initiator should not be blank [{0}]
payment.fetch.rule.sellers.mismatch={1} are not allowed to fetch payment for access level {2} for rule : [{0}]

invoice.fetch.rule.missing.initiator=Request Initiator should not be blank [{0}]
invoice.fetch.rule.sellers.mismatch={1} are not allowed to fetch invoice for access level {2} for rule : [{0}]

calculate.credit.note.fail=Fail to calculated credit note for orderId [{0}]
calculate.invoice.fail=Fail to calculated invoice for orderId [{0}]
pre.order.success=Pre order processed successfully
invalid.initiator.user=User not resolved or blocked: [{0}]

erp.external.order.validate.dealer.balance.error=Unable to validate dealer balance for order[{0}}]. {1}
erp.external.order.invoice.amount.not.resolved=Invoice amount not resolved. Unable to validate dealer balance for order[{0}}]
erp.mandatory.param.not.resolved=mandatory field [{0}}] not resolved
erp.param.not.resolved=Error in resolving fields with detailed message: {0}
erp.mandatory.param.not.loop.resolved=mandatory field [{0}] is not resolved at row[{1}]

inventory.not.found=Inventory does not exist for order id: [{0}]

order.returnable.item.product.not.found=No returnable inventory entry found for the product {0}
order.returnable.item.quantity.not.valid=Returnable inventory quantity is not valid for the product {0}
ims.fetch.inventory.count.by.owner.error=Error in fetching inventory count by owner[{0}}] for product skus [{1}]

order.state.not.found=Order states not found
order.states.fetch.success=All Order states fetched successfully

ext.update.order.lineItems.not.found=Line items mandatory for order id: {0}
ext.update.order.lineItems.contains.invalid.data=productSku is NULL or updatedQuantity is null/negative quantity
ext.update.order.ersreference.empty=ersReference is Empty for order id: {0}
ext.update.order.invalid.state=issue with the order status for order id : {0}
ext.update.order.invalid.reseller.id=buyer and input reseller id are not matching
ext.update.order.invalid.product.sku.in.line.items=issue with product sku's in line items for order id : {0}
ext.update.order.invalid.quantity.in.line.items=issue with requested updated quantity in line items for order id : {0}
ext.update.order.transaction.toState.identification.failed=No valid To state found

## OTP
otp.validation.failed=The OTP provided is invalid
otp.validation.failed.remedial.action.reverse=OTP validation failed. Order with id: {0} has been reverted
otp.request.failed=The OTP could not be generated

ext.update.order.status.empty=order status mandatory for order id: {0}
ext.update.order.state.set.already=Order [{0}] state is already {1}

linked.order.ids.empty=linked order ids cannot be empty
immediate.parent.transaction.not.found=immediate parent transaction not found
original.parent.transaction.not.found=original parent transaction not found

exchange.suborder.restriction.rule.error=Exchange order does not support the suborder as an {0}.

order.product.request.installment.fields.not.found=Configured installment fields not found in order request (In items array data fields) or Requested product does not support installment.


####### validations message fields #######

GenericValidationPrefix=Following field(s) is/are invalid:
raiseOrderRequest.orderType.message=orderType
raiseOrderRequest.channel.message=channel
itemRow.productSku.message=productSku
itemRow.quantity.message=quantity
itemRow.reserveType.message=reserveType
itemRow.serials.message=serials
itemRow.batchIds.message=batchIds
orderInternalDTO.internalOrderId.message=internalOrderId
rangeInfo.batchId.message=batchId
rangeInfo.startSerial.message=startSerial
rangeInfo.endSerial.message=endSerial
additionalField.name.message=name
additionalField.value.message=value
settleInvoiceRequest.payer.message=payer
settleInvoiceRequest.payee.message=payee
settleInvoiceRequest.invoiceIds.message=invoiceIds
duePaymentRequest.sellers.message=sellers
duePaymentRequest.buyers.message=buyers
raiseOrderRequestV2.orderType.message=orderType
raiseOrderRequestV2.paymentAgreement.message=paymentAgreement
raiseOrderRequestV2.tripId.message=tripId
raiseOrderRequestV2.returnReason.message=returnReason
raiseOrderRequestV2.paymentMode.message=paymentMode
raiseOrderRequestV2.linkedOrderIds.message=linkedOrderIds
raiseOrderRequestV2.returnType.message=returnType
uploadInventoryRequest.externalOrderId.message=externalOrderId
productInfo.productSku.message=productSku
productInfo.batchId.message=batchId
productInfo.quantity.message=quantity
productInfo.serials.message=serials
rejectDetails.rejectReason.message=rejectReason
createOrderReasonTypeRequest.code.message=code
createOrderReasonTypeRequest.type.message=type
createOrderReasonTypeRequest.description.message=description
paymentPresetRequest.orderType.message=orderType
paymentPresetRequest.resellerId.message=resellerId
paymentPresetRequest.resellerType.message=resellerType
paymentPresetRequest.paymentModes.message=paymentModes
paymentPresetRequest.paymentAgreements.message=paymentAgreements
orderInventory.productSKU.message=productSKU
orderInventory.inventoryId.message=inventoryId
orderInventory.refNo.message=refNo
orderInventory.ownerId.message=ownerId
orderInventory.serialNo.message=serialNo
orderInventory.batchId.message=batchId
orderInventory.ownerHistory.message=ownerHistory
orderInventory.locationId.message=locationId
orderInventory.quantity.message=quantity
orderInventory.startSerial.message=startSerial
orderInventory.endSerial.message=endSerial
orderTransactionRequest.operationType.message=operationType
orderTransactionRequest.from.message=from
orderTransactionRequest.to.message=to
orderTransactionRequest.amount.message=amount
orderTransactionRequest.tripId.message=tripId
orderTransactionRequest.externalReferenceNumber.message=externalReferenceNumber
orderTransactionData.internalOrderIds.message=internalOrderIds
orderTransactionData.reason.message=reason
makePaymentRequest.tripId.message=tripId
makePaymentRequest.paymentMode.message=paymentMode
makePaymentRequest.amount.message=amount
makePaymentRequest.paidFrom.message=paidFrom
makePaymentRequest.paidTo.message=paidTo
makePaymentRequest.externalReferenceNo.message=externalReferenceNo
makePaymentRequest.invoiceId.message=invoiceId
makePaymentRequest.name.message=name
confirmPaymentRequest.paymentMode.message=paymentMode
confirmPaymentRequest.paidFrom.message=paidFrom
confirmPaymentRequest.paidTo.message=paidTo
confirmPaymentRequest.externalReferenceNumber.message=externalReferenceNumber
confirmPaymentRequest.data.message=data
confirmPaymentRequest.paymentLink.message=paymentLink
orderReconciliationRequest.tripId.message=tripId
orderReconciliationRequest.from.message=from
orderReconciliationRequest.to.message=to
reconcilePaymentDTO.amount.message=amount
reconcilePaymentDTO.reason.message=reason
deliveryOrder.orderId.message=orderId
internalOrderItem.orderId.message=orderId
orderProductQuotaRuleRequest.resellerId.message=resellerId
orderProductQuotaRuleRequest.productSKU.message=productSKU
orderProductQuotaRuleRequest.quotaFor.message=quotaFor
orderProductQuotaRuleRequest.multipleOf.message=multipleOf
orderProductQuotaRuleRequest.hourlyLimit.message=hourlyLimit
orderProductQuotaRuleRequest.dailyLimit.message=dailyLimit
orderProductQuotaRuleRequest.monthlyLimit.message=monthlyLimit
orderProductQuotaRuleRequest.weeklyLimit.message=weeklyLimit
getInternalOrderViewRequest.internalOrderIds.message=internalOrderIds
partyInfo.id.message=resellerId
partyInfo.idType.message=resellerType
additionalFields.message=additionalFields
data.message=data
deliveryPathInfo.agentType.message=agentType
sort.message=sort
filter.message=filter
page.message=page
perPage.message=perPage

## Credit note api ##
unauthorized.user.to.access.credit.note=User [{0}] is not the buyer or seller or initiator of the order [{1}]
no.credit.note.found.for.order=No credit note found for order [{0}]
credit_notes.fetch.error=Error in fetching credit notes
credit_notes.fetch.success=All credit notes fetched successfully
update.inventory.for.trip.fail=Failed to mark inventory against trip[{0}]
piso.update.inventory.for.trip.fail=Order[{0}] raised successfully but error in marking the inventory against the corresponding PISO trip
ims.fetch.inventory.owner.blank=Owner information not provided, cannot fetch inventory
ims.fetch.inventory.by.inventory.type.error=Error in fetching inventory of type[{0}}] under owner[{1}] with the provided attributes

## Order Product Quota Rule
order.product.quota.for.invalid=Order product quotaFor [{0}] is not valid
order.product.quota.rule.already.exist=Order product quota rule already exist against resellerId: [{0}], productSKU: [{1}] and quotaFor: [{2}]
order.product.quota.rules.fetch.success=All order product quota rules fetched successfully
order.product.quota.rule.not.exist=Order product quota rule does not exist against rule id [{0}]
order.product.quota.rule.delete.success=Order product quota rule deleted successfully
order.product.quota.rule.fetch.success=Order product quota rule fetched successfully
order.product.quota.rule.create.success=Order product quota rule created successfully
order.product.quota.rule.update.success=Order product quota rule updated successfully
order.product.quota.rule.limit.nonzero=At least one of the product quota's limit and multipleOf should be greater than zero


promotional.material.reserve.inventory.fail=Fail to reserve promotional materials inventory for order {0}

due.and.unused.payment.fetch.rule.missing.initiator=Request Initiator should not be blank [{0}]
due.and.unused.payment.fetch.rule.sellers.mismatch={1} are not allowed to fetch due and unused payment for access level {2} for rule : [{0}]

order.reference.generation.fail=Error in generating unique reference number
order.internal.invalid.state=Internal order is in invalid state for reschedule delivery order operation
order.internal.order.invalid.state=Order is in invalid state for reschedule delivery order operation
order.internal.view.invalid.state=Cannot process internal orders that are not in state: [{0}]
order.internal.view.fail=Failed to get order internal view
order.internal.not_found=No internal orders found with ids: [{0}]
order.internal_id.blank=Internal order ids cannot be null or empty
order.internal.failed=Failed to reschedule delivery order
order.internal.create.fail=Failed to create internal order
order.internal.replacement.not.found=Replacement items not found for some missing items for internal order id: [{0}]
order.internal.replacement.quantity.mismatch=Replacement items quantity does not match with missing item quantity for internal order id: [{0}]
order.internal.view.fetch.success=Order internal view fetched successfully
#0-success list, 1-fail list, 2-success count, 3-fail count
order.internal.reschedule.success=Reschedule request processed successfully for [{0}] and failed for [{1}]

payment.fetch.rule.missing.initiator=Request Initiator should not be blank [{0}]
payment.fetch.rule.sellers.mismatch={1} are not allowed to fetch payment for access level {2} for rule : [{0}]

invoice.fetch.rule.missing.initiator=Request Initiator should not be blank [{0}]
invoice.fetch.rule.sellers.mismatch={1} are not allowed to fetch invoice for access level {2} for rule : [{0}]

calculate.credit.note.fail=Fail to calculated credit note for orderId [{0}]
calculate.invoice.fail=Fail to calculated invoice for orderId [{0}]
pre.order.success=Pre order processed successfully
invalid.initiator.user=User not resolved or blocked: [{0}]

erp.external.order.validate.dealer.balance.error=Unable to validate dealer balance for order[{0}}]. {1}
erp.external.order.invoice.amount.not.resolved=Invoice amount not resolved. Unable to validate dealer balance for order[{0}}]
erp.mandatory.param.not.resolved=mandatory field [{0}}] not resolved
erp.param.not.resolved=Error in resolving fields with detailed message: {0}
erp.mandatory.param.not.loop.resolved=mandatory field [{0}] is not resolved at row[{1}]

otp.validation.failed=The OTP provided is invalid
otp.validation.failed.remedial.action.reverse=OTP validation failed. Order with id: {0} has been reverted
otp.request.failed=The OTP could not be generated

range.expression.result.empty=Expression evaluated to blank string, configure the expression properly.
products.variants.search.error=Failed to fetch sibling variants from PMS
order.combination.product.check.failure=Ordered product [{0}] does not match any of the allowed product combination [{1}]
order.combination.sku.check.failure=Ordered product sku [{0}] does not match any of the allowed product sku combination [{1}]
order.combination.order.quantity.failure=Ordered product [{0}] quantity is {1} than allowed order quantity [{2}]
order.combination.clubbed.quantity.failure=Ordered clubbed product/skus [{0}] quantity does not match the allowed quantity [{1}]
order.combination.rule.execution.failure=Unexpected error occurred while processing rule: [{0}]
exchange.order.product.rule.failure=Unexpected error occurred while processing rule: [{0}]
exchange.order.validate.failed={0} {1} is not in eligible list {2} for exchange
exchange.order.validate.exclusion.failed={0} {1} is in the exclusion list {2} for exchange

delegate.order.rule.initiator.error=Initiator not found while processing transaction.