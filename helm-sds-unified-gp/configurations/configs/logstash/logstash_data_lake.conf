#Logstash configuration
input {
  ######### Uncomment this pipeline address if we use FileBeat and not Logstash directly.
  #pipeline { address => datalakepipeline }

  ######### comment out below section if we don't use logstash directly but through Filebeat.
  file {
      start_position => "beginning"
      path =>  ["/var/seamless/log/txe/txe-data.dump*","/var/seamless/log/order-management-system/om-data.dump*","/var/seamless/log/inventory-management-system/dump/ims-data.dump*","/var/seamless/log/account-management-service/account-management-service-data.dump*","/var/seamless/log/dealer-management-system/dealer-management-system-data.dump*","/var/seamless/log/product-management/product-management-datafeed.log*","/var/seamless/log/inventory-management-system/ims-data.dump*","/var/seamless/log/kyc/data-dump/kyc-data.dump*","/var/seamless/log/group-management/group-management-data.dump*","/var/seamless/log/trip-management-system/trip-management-system-data.dump*"]
      sincedb_path => "/var/seamless/log/sincedb_data_lake.log"
    }
  #######################################################################

}

#Filter out the logs before inserting to data lake
filter  {
    json{
        skip_on_invalid_json => true
        source => "message"
    }

    #mutate {
     # convert => { "rootComponent" => "boolean" }
      #convert => { "transactionAmount" => "float" }
    #}

    #verify if transaction contains valid json strcuture or not
    if "_jsonparsefailure" not in [tags] {

        if ([eventName] in ["getResellerInfo","getAllResellerTypes","getAllResellerTypeChildren",
        "getAllResellerTypeParents","SEARCH_KYC","VALIDATE_KYC","SEARCH_ACCOUNTS","getAllResellerAllowedTypes","BULK_UPDATE_TDR"]) {
            drop{}
        }

        #Remove comma from oms.items[].quantity
        ruby {
              code => "
              if event.get('[oms.items]')
                  event.get('[oms.items]').each_with_index do |item, index|
                   if item['quantity']
                      item['quantity'] = item['quantity'].gsub( ',', '' )
                          temp = index.to_s
                          event.set('[oms.items][' + temp +'][quantity]', item['quantity'])
                          end
                      end
                   end
              "
        }

        mutate {
          #convert => { "transactionAmount" => "abc" }
          convert => { "transactionAmount" => "float" }
          convert => { "rootComponent" => "boolean" }
          convert => { "oms.transactionAmount" => "float" }

          convert => { "oms.seller.additionalFields.last_transaction_date" => "string" }
          convert => { "oms.seller.additionalFields.dealer_registration_date" => "string" }
          convert => { "oms.seller.additionalFields.rent_due_date" => "string" }
          convert => { "oms.seller.additionalFields.poster_update_date" => "string" }
          convert => { "oms.seller.additionalFields.dealer_update_date" => "string" }
          convert => { "oms.seller.additionalFields.created_on" => "string" }
          convert => { "oms.seller.additionalFields.modified_on" => "string" }

          convert => { "oms.sender.additionalFields.last_transaction_date" => "string" }
          convert => { "oms.sender.additionalFields.dealer_registration_date" => "string" }
          convert => { "oms.sender.additionalFields.rent_due_date" => "string" }
          convert => { "oms.sender.additionalFields.poster_update_date" => "string" }
          convert => { "oms.sender.additionalFields.dealer_update_date" => "string" }
          convert => { "oms.sender.additionalFields.created_on" => "string" }
          convert => { "oms.sender.additionalFields.modified_on" => "string" }

          convert => { "oms.buyer.additionalFields.last_transaction_date" => "string" }
          convert => { "oms.buyer.additionalFields.dealer_registration_date" => "string" }
          convert => { "oms.buyer.additionalFields.rent_due_date" => "string" }
          convert => { "oms.buyer.additionalFields.created_on" => "string" }
          convert => { "oms.buyer.additionalFields.modified_on" => "string" }

          convert => { "oms.receivers.additionalFields.last_transaction_date" => "string" }
          convert => { "oms.receivers.additionalFields.dealer_registration_date" => "string" }
          convert => { "oms.receivers.additionalFields.rent_due_date" => "string" }
          convert => { "oms.receivers.additionalFields.created_on" => "string" }
          convert => { "oms.receivers.additionalFields.modified_on" => "string" }

          convert => { "oms.deliveryPaths.oms.pickup.additionalFields.last_transaction_date" => "string" }
          convert => { "oms.deliveryPaths.oms.pickup.additionalFields.dealer_registration_date" => "string" }
          convert => { "oms.deliveryPaths.oms.pickup.additionalFields.dealer_update_date" => "string" }
          convert => { "oms.deliveryPaths.oms.pickup.additionalFields.created_on" => "string" }
          convert => { "oms.deliveryPaths.oms.pickup.additionalFields.modified_on" => "string" }
          convert => { "oms.deliveryPaths.oms.pickup.additionalFields.dbmDob" => "string" }
          convert => { "oms.deliveryPaths.oms.pickup.additionalFields.customer_registration_date" => "string" }
          convert => { "oms.deliveryPaths.oms.pickup.additionalFields.customer_modification_date" => "string" }

          convert => { "oms.drop.additionalFields.last_transaction_date" => "string" }
          convert => { "oms.drop.additionalFields.dealer_registration_date" => "string" }
          convert => { "oms.drop.additionalFields.dealer_update_date" => "string" }
          convert => { "oms.drop.additionalFields.created_on" => "string" }
          convert => { "oms.drop.additionalFields.modified_on" => "string" }
          convert => { "oms.drop.additionalFields.dbmDob" => "string" }
          convert => { "oms.drop.additionalFields.customer_registration_date" => "string" }
          convert => { "oms.drop.additionalFields.customer_modification_date" => "string" }

          convert => { "oms.reconciliation.additionalFields.last_transaction_date" => "string" }
          convert => { "oms.reconciliation.additionalFields.dealer_registration_date" => "string" }
          convert => { "oms.reconciliation.additionalFields.dealer_update_date" => "string" }
          convert => { "oms.reconciliation.additionalFields.created_on" => "string" }
          convert => { "oms.reconciliation.additionalFields.modified_on" => "string" }
          convert => { "oms.reconciliation.additionalFields.dbmDob" => "string" }
          convert => { "oms.reconciliation.additionalFields.customer_registration_date" => "string" }
          convert => { "oms.reconciliation.additionalFields.customer_modification_date" => "string" }

          # SCC fields for aggregation
          convert => { "commission.commissionAmount" => "float" }
          convert => { "payout.netPayoutAmount" => "float" }
          convert => { "sccAggregator.totalRawTransactions" => "float" }
          convert => { "sccAggregator.totalRawTransactionAmount" => "float" }
        }

        if [oms.seller.additionalFields][last_transaction_date] == "" {
            mutate{
            remove_field => ["[oms.seller.additionalFields][last_transaction_date]"]
        }}
        if [oms.seller.additionalFields][poster_update_date] == "" {
            mutate{
            remove_field => ["[oms.seller.additionalFields][poster_update_date]"]
        }}
        if [oms.seller.additionalFields][dealer_registration_date] == "" {
            mutate{
            remove_field => ["[oms.seller.additionalFields][dealer_registration_date]"]
        }}
        if [oms.seller.additionalFields][rent_due_date] == "" {
            mutate{
            remove_field => ["[oms.seller.additionalFields][rent_due_date]"]
        }}
        if [oms.seller.additionalFields][dealer_update_date] == "" {
            mutate{
            remove_field => ["[oms.seller.additionalFields][dealer_update_date]"]
        }}
        if [oms.seller.additionalFields][created_on] == "" {
            mutate{
            remove_field => ["[oms.seller.additionalFields][created_on]"]
        }}
        if [oms.seller.additionalFields][modified_on] == "" {
            mutate{
            remove_field => ["[oms.seller.additionalFields][modified_on]"]
        }}

        if [oms.sender.additionalFields][last_transaction_date] == "" {
            mutate{
            remove_field => ["[oms.sender.additionalFields][last_transaction_date]"]
        }}
        if [oms.sender.additionalFields][dealer_registration_date] == "" {
            mutate{
            remove_field => ["[oms.sender.additionalFields][dealer_registration_date]"]
        }}
        if [oms.sender.additionalFields][rent_due_date] == "" {
            mutate{
            remove_field => ["[oms.sender.additionalFields][rent_due_date]"]
        }}
        if [oms.sender.additionalFields][poster_update_date] == "" {
            mutate{
            remove_field => ["[oms.sender.additionalFields][poster_update_date]"]
        }}
        if [oms.sender.additionalFields][dealer_update_date] == "" {
            mutate{
            remove_field => ["[oms.sender.additionalFields][dealer_update_date]"]
        }}
        if [oms.sender.additionalFields][created_on] == "" {
            mutate{
            remove_field => ["[oms.sender.additionalFields][created_on]"]
        }}
        if [oms.sender.additionalFields][modified_on] == "" {
            mutate{
            remove_field => ["[oms.sender.additionalFields][modified_on]"]
        }}

        if [oms.buyer.additionalFields][last_transaction_date] == "" {
            mutate{
            remove_field => ["[oms.buyer.additionalFields][last_transaction_date]"]
        }}
        if [oms.buyer.additionalFields][dealer_registration_date] == "" {
            mutate{
            remove_field => ["[oms.buyer.additionalFields][dealer_registration_date]"]
        }}
        if [oms.buyer.additionalFields][rent_due_date] == "" {
            mutate{
            remove_field => ["[oms.buyer.additionalFields][rent_due_date]"]
        }}
        if [oms.buyer.additionalFields][created_on] == "" {
            mutate{
            remove_field => ["[oms.buyer.additionalFields][created_on]"]
        }}
        if [oms.buyer.additionalFields][modified_on] == "" {
            mutate{
            remove_field => ["[oms.buyer.additionalFields][modified_on]"]
        }}

        if [oms.receivers.additionalFields][last_transaction_date] == "" {
            mutate{
            remove_field => ["[oms.receivers.additionalFields][last_transaction_date]"]
        }}
        if [oms.receivers.additionalFields][dealer_registration_date] == "" {
            mutate{
            remove_field => ["[oms.receivers.additionalFields][dealer_registration_date]"]
        }}
        if [oms.receivers.additionalFields][rent_due_date] == "" {
            mutate{
            remove_field => ["[oms.receivers.additionalFields][rent_due_date]"]
        }}
        if [oms.receivers.additionalFields][created_on] == "" {
            mutate{
            remove_field => ["[oms.receivers.additionalFields][created_on]"]
        }}
        if [oms.receivers.additionalFields][modified_on] == "" {
            mutate{
            remove_field => ["[oms.receivers.additionalFields][modified_on]"]
        }}

        if [oms.deliveryPaths.oms.pickup.additionalFields][last_transaction_date] == "" {
            mutate{
            remove_field => ["[oms.deliveryPaths.oms.pickup.additionalFields][last_transaction_date]"]
        }}
        if [oms.deliveryPaths.oms.pickup.additionalFields][dealer_registration_date] == "" {
            mutate{
            remove_field => ["[oms.deliveryPaths.oms.pickup.additionalFields][dealer_registration_date]"]
        }}
        if [oms.deliveryPaths.oms.pickup.additionalFields][dealer_update_date] == "" {
            mutate{
            remove_field => ["[oms.deliveryPaths.oms.pickup.additionalFields][dealer_update_date]"]
        }}
        if [oms.deliveryPaths.oms.pickup.additionalFields][created_on] == "" {
            mutate{
            remove_field => ["[oms.deliveryPaths.oms.pickup.additionalFields][created_on]"]
        }}
        if [oms.deliveryPaths.oms.pickup.additionalFields][modified_on] == "" {
            mutate{
            remove_field => ["[oms.deliveryPaths.oms.pickup.additionalFields][modified_on]"]
        }}
        if [oms.deliveryPaths.oms.pickup.additionalFields][dbmDob] == "" {
            mutate{
            remove_field => ["[oms.deliveryPaths.oms.pickup.additionalFields][dbmDob]"]
        }}
        if [oms.deliveryPaths.oms.pickup.additionalFields][customer_registration_date] == "" {
            mutate{
            remove_field => ["[oms.deliveryPaths.oms.pickup.additionalFields][customer_registration_date]"]
        }}
        if [oms.deliveryPaths.oms.pickup.additionalFields][customer_modification_date] == "" {
            mutate{
            remove_field => ["[oms.deliveryPaths.oms.pickup.additionalFields][customer_modification_date]"]
        }}

        if [oms.drop.additionalFields][last_transaction_date] == "" {
            mutate{
            remove_field => ["[oms.drop.additionalFields][last_transaction_date]"]
        }}
        if [oms.drop.additionalFields][dealer_registration_date] == "" {
            mutate{
            remove_field => ["[oms.drop.additionalFields][dealer_registration_date]"]
        }}
        if [oms.drop.additionalFields][dealer_update_date] == "" {
            mutate{
            remove_field => ["[oms.drop.additionalFields][dealer_update_date]"]
        }}
        if [oms.drop.additionalFields][created_on] == "" {
            mutate{
            remove_field => ["[oms.drop.additionalFields][created_on]"]
        }}
        if [oms.drop.additionalFields][modified_on] == "" {
            mutate{
            remove_field => ["[oms.drop.additionalFields][modified_on]"]
        }}
        if [oms.drop.additionalFields][dbmDob] == "" {
            mutate{
            remove_field => ["[oms.drop.additionalFields][dbmDob]"]
        }}
        if [oms.drop.additionalFields][customer_registration_date] == "" {
            mutate{
            remove_field => ["[oms.drop.additionalFields][customer_registration_date]"]
        }}
        if [oms.drop.additionalFields][customer_modification_date] == "" {
            mutate{
            remove_field => ["[oms.drop.additionalFields][customer_modification_date]"]
        }}

        if [oms.reconciliation.additionalFields][last_transaction_date] == "" {
            mutate{
            remove_field => ["[oms.reconciliation.additionalFields][last_transaction_date]"]
        }}
        if [oms.reconciliation.additionalFields][dealer_registration_date] == "" {
            mutate{
            remove_field => ["[oms.reconciliation.additionalFields][dealer_registration_date]"]
        }}
        if [oms.reconciliation.additionalFields][dealer_update_date] == "" {
            mutate{
            remove_field => ["[oms.reconciliation.additionalFields][dealer_update_date]"]
        }}
        if [oms.reconciliation.additionalFields][created_on] == "" {
            mutate{
            remove_field => ["[oms.reconciliation.additionalFields][created_on]"]
        }}
        if [oms.reconciliation.additionalFields][modified_on] == "" {
            mutate{
            remove_field => ["[oms.reconciliation.additionalFields][modified_on]"]
        }}
        if [oms.reconciliation.additionalFields][dbmDob] == "" {
            mutate{
            remove_field => ["[oms.reconciliation.additionalFields][dbmDob]"]
        }}
        if [oms.reconciliation.additionalFields][customer_registration_date] == "" {
            mutate{
            remove_field => ["[oms.reconciliation.additionalFields][customer_registration_date]"]
        }}
        if [oms.reconciliation.additionalFields][customer_modification_date] == "" {
            mutate{
            remove_field => ["[oms.reconciliation.additionalFields][customer_modification_date]"]
        }}

        date {
                match => ["timestamp","yyyy-MM-dd HH:mm:ss"]
                timezone => "UTC"
                target => "timestamp"
        }

        ruby {
               code => "
                 require 'date'
                 if event.get('componentName')
                     componentName = event.get('componentName') + '.eventName'
                     if  event.get('eventName')
                        eventName = event.get('eventName')
                        event.set(componentName,eventName)
                     end
                 end
                 week_n = event.get('timestamp').time.strftime '%V'
                 month_n = event.get('timestamp').time.strftime '%m'
                 year_n = event.get('timestamp').time.strftime '%Y'
                 if(week_n == '01' && month_n == '12')
                     year_n = (year_n.to_i + 1)
                     week_num = year_n.to_s + 'w' + week_n.to_s
                 else if (month_n == '01' && week_n.to_i > 50)
                     year_n = (year_n.to_i - 1)
                     week_num = year_n.to_s + 'w' + week_n.to_s
                 else
                     week_num = year_n + 'w' + week_n
                 end
                 end
                 event.set('[@metadata][week_num]', week_num)
                 month_n = month_n.to_i
                 event.set('[@metadata][month_num]', month_n)
                 if(month_n >=1 && month_n <=3)
                    event.set('[@metadata][quarter]', 'Q1')
                 else if(month_n >=4 && month_n <=6)
                    event.set('[@metadata][quarter]', 'Q2')
                 else if(month_n >=7 && month_n <=9)
                    event.set('[@metadata][quarter]', 'Q3')
                 else
                    event.set('[@metadata][quarter]', 'Q4')
                 end
                 end
                 end
                "
        }

        prune {
               blacklist_names => ["log","tags","message","path","@version","host","ecs","input","cloud"]
         }

        mutate {
             add_field => {
                 "Quarter" => "%{[@metadata][quarter]}"
                 "month" => "%{[@metadata][month_num]}"
             }
        }

        #SCC fields
        mutate {
            add_field => {
                 "originalLastUpdatedTimestamp" => "%{lastUpdatedTimestamp}"
            }
        }
        ruby {
            code => "event.set('lastUpdatedTimestamp', (event.get('@timestamp').to_f*1000).to_i)"
        }

  } else {
       #data-feed json is invalid, so prepare index name with @timestamp
       #Doc Id of skipped txn would be random number generated by ES
       prune {
             blacklist_names => ["agent","path","@version","host","ecs","input","cloud"]
       }
       ruby {
             code => "
             puts 'Transaction skipped due to invalid JSON format with @timestamp:'
             puts event.get('@timestamp')
             require 'date'
             week_n = event.get('@timestamp').time.strftime '%V'
             month_n = event.get('@timestamp').time.strftime '%m'
             year_n = event.get('@timestamp').time.strftime '%Y'
             if(week_n == '01' && month_n == '12')
                 year_n = (year_n.to_i + 1)
                 week_num = year_n.to_s + 'w' + week_n.to_s
             else if (month_n == '01' && week_n.to_i > 50)
                 year_n = (year_n.to_i - 1)
                 week_num = year_n.to_s + 'w' + week_n.to_s
             else
                 week_num = year_n + 'w' + week_n
             end
             end
             event.set('[@metadata][week_num]', week_num)
             "
       }
  }

    if ([eventName] in ["getResellerInfo","getAllResellerTypes","getAllResellerTypeChildren",
    "getAllResellerTypeParents","SEARCH_KYC","VALIDATE_KYC","SEARCH_ACCOUNTS"]) {
        drop{}
    }

    if([operation] and [operation]=="REQUEST_REVERSAL" and [resultMessage] and [resultMessage]=="SUCCESS" and [originalErsReference] and [originalErsReference] != "") {
        elasticsearch {
            hosts => [ "localhost:9200" ]
            query => "_id:%{originalErsReference}"
            index => "data_lake"
            fields => { "timestamp" => "referredTransactionTime" }
        }
    }

    #generating index name of referred transaction

    date {
        match => ["referredTransactionTime", "ISO8601"]
        timezone => "UTC"
        target => "referredTransactionTime"
    }


    ruby {
code => '
        transactionPropsValues = event.get("transactionProps")
        event.set("[batchId]", "NA")
        if transactionPropsValues
            transactionPropsArr = transactionPropsValues.split("|")
            if transactionPropsArr
                transactionPropsArr.length.times{ |x|
                    if transactionPropsArr[x].include? "batchId"
                        props = transactionPropsArr[x].split("=")
                        if props and props[1]
                            event.set("[batchId]", props[1])
                        end
                    end
                    if transactionPropsArr[x].include? "RECEIVER_RESELLER_PATH"
                        props = transactionPropsArr[x].split("=")
                        if props and props[1]
                                 event.set("[receiverResellerPath]", props[1])
                        end
                    end
                }
            end
        end
'
}

ruby {
    code => '
            transactionPropsValues = event.get("transactionProps")
            event.set("[batchId]", "NA")
            if transactionPropsValues
                transactionPropsArr = transactionPropsValues.split("|")
                if transactionPropsArr
                    transactionPropsArr.length.times{ |x|
                        if transactionPropsArr[x].include? "batchId"
                            props = transactionPropsArr[x].split("=")
                            if props and props[1]
                                event.set("[batchId]", props[1])
                            end
                        end
                if transactionPropsArr[x].include? "RECEIVER_RESELLER_PATH"
                            props = transactionPropsArr[x].split("=")
                            if props and props[1]
                     event.set("[receiverResellerPath]", props[1])
                            end
                        end

                if transactionPropsArr[x].include? "SENDER_COMMISSION"
                            props = transactionPropsArr[x].split("=")
                            if props and props[1]
                                if props[0] and props[0]=="SENDER_COMMISSION"

                                  event.set("[senderCommission]", props[1])
                                end
                            end
                        end

                if transactionPropsArr[x].include? "SENDER_BONUS"
                            props = transactionPropsArr[x].split("=")
                            if props and props[1]
                                if props[0] and props[0]=="SENDER_BONUS"

                                  event.set("[senderBonusAmount]", props[1])
                                end
                            end
                        end

                    if transactionPropsArr[x].include? "RECEIVER_COMMISSION"
                            props = transactionPropsArr[x].split("=")
                            if props and props[1]
                                if props[0] and props[0]=="RECEIVER_COMMISSION"

                                  event.set("[receiverCommission]", props[1])
                                end
                            end
                        end

                if transactionPropsArr[x].include? "RECEIVER_BONUS"
                            props = transactionPropsArr[x].split("=")
                            if props and props[1]
                                if props[0] and props[0]=="RECEIVER_BONUS"
                     event.set("[receiverBonusAmount]", props[1])
                                end
                            end
                        end

                if transactionPropsArr[x].include? "comments"
                             props = transactionPropsArr[x].split("=")
                             if props and props[1]
                                 if props[0] and props[0]=="comments"
                      event.set("[clientComment]", props[1])
                                 end
                             end
                         end

                 if transactionPropsArr[x].include? "comment"
                             props = transactionPropsArr[x].split("=")
                             if props and props[1]
                                 if props[0] and props[0]=="comment"
                        event.set("[clientComment]", props[1])
                                    end
                                end
                            end

                    }
                end
            end
    '
    }


    ruby {
        code => "
        require 'date'
        week_n = event.get('referredTransactionTime').time.strftime '%V'
        month_n = event.get('referredTransactionTime').time.strftime '%m'
        year_n = event.get('referredTransactionTime').time.strftime '%Y'
        if(week_n == '01' && month_n == '12')
                year_n = (year_n.to_i + 1)
                week_num = year_n.to_s + 'w' + week_n.to_s
            else if (month_n == '01' && week_n.to_i > 50)
                year_n = (year_n.to_i - 1)
                week_num = year_n.to_s + 'w' + week_n.to_s
            else
                week_num = year_n + 'w' + week_n
            end
        end
        event.set('[@metadata][week_num_referred]', week_num)
        "
    }

    date {
        match => ["timestamp","yyyy-MM-dd HH:mm:ss"]
        timezone => "UTC"
        target => "timestamp"
    }

    ruby {
        code => "
            require 'date'
            week_n = event.get('timestamp').time.strftime '%V'
            month_n = event.get('timestamp').time.strftime '%m'
            year_n = event.get('timestamp').time.strftime '%Y'
            if(week_n == '01' && month_n == '12')
                    year_n = (year_n.to_i + 1)
                    week_num = year_n.to_s + 'w' + week_n.to_s
                else if (month_n == '01' && week_n.to_i > 50)
                    year_n = (year_n.to_i - 1)
                    week_num = year_n.to_s + 'w' + week_n.to_s
                else
                    week_num = year_n + 'w' + week_n
                end
            end
            event.set('[@metadata][week_num]', week_num)
            month_n = month_n.to_i
            event.set('[@metadata][month_num]', month_n)

            "
    }

    if ([rootComponent]) {
         #Remove all fields below inside blacklist_names list.
         prune {
           blacklist_names => ["log","tags","agent","message","path","@version","host","ecs","input","cloud"]
         }
    } else {
         #Remove all fields except below whitelist_names list.
         prune {
         whitelist_names => ["%{componentName}","transactionNumber","clientReference","timestamp","productName","productSKU","receiverAccountType","receiverBalanceValueAfter","receiverBalanceValueBefore","receiverBonusAmount","receiverMSISDN","receiverRegionId","receiverResellerId","receiverResellerName","receiverResellerType","transactionAmount","currency","senderAccountType","senderBalanceValueBefore","senderBalanceValueAfter","senderMSISDN","senderRegionId","senderResellerId","senderResellerName","senderResellerPath","senderResellerType","transactionProfile","transactionType","resultCode","receiverCommission","senderCommission","supplierReference","resultMessage","originalErsReference","channel","ersReference","endTime","startTime","senderCellId","receiverCellId","transactionStatus","clientComments","isTransactionReversible","transactionProps","batchId","receiverResellerPath","senderBonusAmount"]
             interpolate => true
         }
    }

}

output {
    if "_jsonparsefailure" in [tags] {
       # if data-feed json is not in correct format, insert it to skipped_txn index
        elasticsearch {
            action => "index"
            hosts => [ "localhost:9200" ]
          # user => elastic
           # password => seamless2021
            index => "skipped_txn_%{[@metadata][week_num]}"
        }
    }
else{
    elasticsearch {
        action => "update"
        hosts => [ "localhost:9200" ]
        #user => elastic
        #password => seamless2021
        index => "data_lake_%{[@metadata][week_num]}"
        document_id => "%{transactionNumber}"
        doc_as_upsert => true
    }

    if([operation] and [operation]=="REQUEST_REVERSAL" and [originalErsReference] and [originalErsReference] != "" and [resultMessage] and [resultMessage]=="SUCCESS") {
        elasticsearch {
            hosts => ["localhost:9200"]
            index => "data_lake_%{[@metadata][week_num_referred]}"
            document_id => "%{originalErsReference}"
            action => "update"
            script => "ctx._source.isTransactionReversible = 'false'"
            script_lang => "painless"
            script_type => "inline"
        }
    }
  }
    stdout {codec => rubydebug}
}