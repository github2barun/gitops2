input {
  file {
    ## Path to sniff for possible changes
    path => "/var/seamless/spool/tdr/Reseller_Sales_MC/*.csv"
    #Read existing files for the first time
    start_position => beginning

    ## Cursor storage.
    sincedb_path => "/opt/seamless/conf/logstash/sincedb_tdr_csv_index_cursor.log"

    ## Name of type, Equivalent to table in SQL.
    type => "tdrs"
  }
}

filter {
    csv {
    	# CSV Header
    	# Customer Specific Headers
    	# Consult the file for actual list of columns.
    	# Standard names are column ids from conf/tdrapp/<columnspecs properties file name>
        columns => ["clientType","endTime","ersReference","receiverMSISDN","requestAmountValue","senderMSISDN","senderResellerId","senderResellerType","transactionType"]
        separator => ","
    }

    # Ignore header - first line of file
    # Ignore failed transactions, transactions other than TOPUP or purchase(voucher), topup done by resellers other than lowest level(POS).
    if ( [ersReference] == "ersReference" or !( [transactionType] in  ["TOPUP", "VOUCHER_OVER_SMS", "PURCHASE", "R2S"] ) or [senderResellerType] != "reseller" ) {
    		drop { }
  		}

    # Remove extraneous fields and rename fields to standard names to match mappings.
    # Standard names are column ids from conf/tdrapp/<columnspecs properties file name>
    mutate {
        # Keep the following fields remove all else
        # "clientType","ersReference","receiverMSISDN","requestAmountValue","senderMSISDN","senderResellerId","senderResellerType","transactionType"
        remove_field => ["message"]

    }

	# Remove commas from the numeric fields for proper parsing.
	mutate {
		gsub => [
			"requestAmountValue", ",",""
		]
	}

	# Parse Date
	# set @timestamp for filtering.
    date {
        match => ["endTime", "yyyy-MM-dd HH:mm:ss"]
    }

    # set EndTime for filtering.
    date {
        match => ["endTime", "yyyy-MM-dd HH:mm:ss"]
        target => "endTime"
    }

	# Convert data types.
	mutate {
		convert => {"clientType" =>  "string" }
        convert => {"ersReference" =>  "string" }
        convert => {"receiverMSISDN" =>  "string" }
        convert => {"requestAmountValue" =>  "float" }
        convert => {"senderMSISDN" =>  "string" }
        convert => {"senderResellerId" =>  "string" }
        convert => {"senderResellerType" =>  "string" }
        convert => {"transactionType" =>  "string" }
	}

}

output {
    stdout { codec => rubydebug }
    elasticsearch {
        hosts => [ "localhost:9200" ]
        index => "tdr_csv_index"
    }
}