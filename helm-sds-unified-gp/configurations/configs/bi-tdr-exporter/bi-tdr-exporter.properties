# Properties for module bi-tdr-exporter
server.contextpath=/bi-tdr-exporter
# The host name to expose the proxy webservice on, typically localhost
#
server.host=0.0.0.0
# The port to expose the proxy webservice on
#

server.port=8920
bi.tdr.elasticsearch.cluster.name=elasticsearch
#bi.tdr.elasticsearch.userName=elastic
#bi.tdr.elasticsearch.password=seamless
bi.tdr.elasticsearch.1.url=localhost
bi.tdr.elasticsearch.1.port=9200
##### enable apiCompatibilityMode for elastic search version 7.11 and higher
bi.tdr.elasticsearch.apiCompatibilityMode=false

# db configurations
database.name=bi-tdr-exporter
database.db_driver=org.mariadb.jdbc.Driver
database.db_url=jdbc:mariadb://localhost:3306/bitdrexporter
database.db_user=refill
database.db_password=refill
database.pool_name=bi-tdr-exporter db pool
database.maximum_pool_size=10
database.minimum_idle=2
#This single config will work for all DBs encryption, no separate configs for different DBs
database.db_password_encryption_enabled=false

reporting.database.name=bi
reporting.database.db_driver=org.mariadb.jdbc.Driver
reporting.database.db_url=jdbc:mariadb://localhost:3306/bi
reporting.database.db_user=refill
reporting.database.db_password=refill
reporting.database.pool_name=bi-reporting db pool
reporting.database.maximum_pool_size=10
reporting.database.minimum_idle=2

db.accounts.driver=org.mariadb.jdbc.Driver
db.accounts.url=jdbc:mysql://localhost/accountmanagement
db.accounts.username=refill
db.accounts.password=refill
db.accounts.pool_name=accountTdr
db.accounts.maximum_pool_size=10
db.accounts.minimum_idle=2

db.refill.driver=org.mariadb.jdbc.Driver
db.refill.url=jdbc:mysql://localhost/Refill
db.refill.username=refill
db.refill.password=refill
db.refill.pool_name=refillTdr
db.refill.maximum_pool_size=10
db.refill.minimum_idle=2

# All Jobs detail separated by comma without space (,) i.e addkyc,approvedkyc,rejectkyc
jobs=dmsinfo,rechargeRecon,CommissionDetails,CommissionHealthControl,SCCPendingPayment
#dmsinfo,dealerOperatorLog,rechargeRecon,transferRecon

jobs.dmsinfo.job_manager=com.seamless.customer.bi.job.GenericTdrExporterJob
jobs.dmsinfo.name=DMSInfo
jobs.dmsinfo.description=DMS info
jobs.dmsinfo.schedule=0 */4 * * * ?
jobs.dmsinfo.group=kyc
jobs.dmsinfo.provider.columnspecs=columnspecs_dms_info.properties
jobs.dmsinfo.exporter.filenamepattern = TDR_DMS_%1$s.csv
jobs.dmsinfo.exporter.exportpath=/var/seamless/spool/tdr
jobs.dmsinfo.exporter.filename_date_format = yyyyMMdd-HHmmss
jobs.dmsinfo.exporter.csv_separator=,
#time in milliseconds
jobs.dmsinfo.lastRecordTimeOffset = 300000
jobs.dmsinfo.search.query=SELECT cr.tag AS resellerId, ed.address AS resellerMSISDN, rb.accountId AS accountId, rb.balance AS resellerBalance, rb.currency AS currency, date_format(now(), '%Y-%m-%d %H:%i:%S') AS calculatedTime, date_format(cr.time_created, '%Y-%m-%d %H:%i:%S') AS registrationDate, date_format(cr.time_first_terminal_activation, '%Y-%m-%d %H:%i:%S') AS activationDate, cr.reseller_path AS resellerPath, pa.pay_limit_value AS payLimit,( CASE pa.pay_limit_period WHEN '86400' THEN '24 hours' WHEN '604800' THEN 'One week' WHEN '2592000' THEN 'One month' ELSE 'Disabled' END) AS payPeriod, cr.name AS resellerName, cr.description AS resellerJuridicalName, cr.rgroup AS resellerGroup, cr.subrgroup AS resellerSubgroup, cr.subsubrgroup AS resellerSubsubgroup, rb.accountTypeId AS accountTypeId, date_format(cr.time_created, '%Y-%m-%d %H:%i:%S') AS resellerCreateDate, rt.id AS resellerTypeId, rt.name AS resellerTypeName, ( CASE cr.status WHEN 0 THEN 'Active' WHEN 1 THEN 'Deactivated' WHEN 2 THEN 'Blocked' ELSE 'UNKNOWN' END) AS resellerStatus, cr.receiver_key , CONCAT(IFNULL(cta.street, 'Street is N/A'), ( CASE WHEN cta.city IS NULL THEN '' WHEN cta.city = '' THEN '' ELSE ', ' END), cta.city) AS address, IFNULL(con.email, 'N/A') as email, IFNULL((SELECT balanceAfter FROM accountmanagement.transactions at WHERE accountId = pa.account_nr AND createDate < CURRENT_DATE() ORDER BY createDate DESC LIMIT 1), 'N/A') AS openingBalance, CASE WHEN rep.parameter_key = 'region' THEN rep.parameter_value ELSE 'N/A' END AS region FROM Refill.commission_receivers cr JOIN Refill.pay_prereg_accounts pa ON pa.owner_key = cr.receiver_key JOIN accountmanagement.accounts rb ON cr.tag = rb.accountId LEFT JOIN Refill.reseller_hierarchy rh ON rh.child_key = cr.receiver_key JOIN Refill.reseller_types rt ON rt.type_key = cr.type_key LEFT JOIN Refill.extdev_devices ed ON ed.owner_key=cr.receiver_key LEFT JOIN Refill.catalogue_addresses cta ON cr.address_key = cta.owner_key LEFT JOIN Refill.catalogue_contacts con ON cr.address_key = con.owner_key LEFT JOIN Refill.reseller_extra_params rep ON cr.receiver_key = rep.receiver_key AND rep.parameter_key = 'region';
jobs.dmsinfo.search.query.param.size=10000
jobs.dmsinfo.search.query.param.lastUpdatedTimestamp=0
jobs.dmsinfo.search.db.query=select sum(lastupdatedtimestamp- 0) as fromDate,UNIX_TIMESTAMP()*1000 as toDate from last_exported_data where jobGroup = 'kyc' and jobName = 'DMSInfo';
jobs.dmsinfo.search.db.query.param=fromDate,toDate


jobs.dealerOperatorLog.job_manager=com.seamless.customer.bi.job.GenericTdrExporterJob
jobs.dealerOperatorLog.name=dealerOperatorDump
jobs.dealerOperatorLog.description=Dealer to Operator Logs TDR
jobs.dealerOperatorLog.schedule=0 0/10 * * * ?
jobs.dealerOperatorLog.group=kyc
jobs.dealerOperatorLog.provider.columnspecs=columnspecs_dealerOperator.properties
jobs.dealerOperatorLog.exporter.filenamepattern = TDR_Dealer_Operator_%1$s.csv
jobs.dealerOperatorLog.exporter.exportpath=/var/seamless/spool/tdr
jobs.dealerOperatorLog.exporter.filename_date_format = yyyyMMdd-HHmmss
jobs.dealerOperatorLog.exporter.csv_separator=,
jobs.dealerOperatorLog.max_rows_to_export = 8000
#time in milliseconds
jobs.dealerOperatorLog.lastRecordTimeOffset = 300000
jobs.dealerOperatorLog.search.query=SELECT @a:=@a+1 sno, tempTable.* FROM (SELECT rec.region region,std.channel channel,transactionType,senderResellerName,receiverMSISDN,receiverResellerID,rec.reseller_type_id senderResellerType,transactionDate, transaction_end_date,std.amount amount,receiverBalanceBefore,receiverBalanceAfter,senderBalanceBefore,senderBalanceAfter, client_comment,senderResellerID, contact_no FROM bi.std_daily_transaction_summary_aggregation std left join std_daily_transaction_summary_aggregation_additional_details dtls on dtls.transaction_reference = std.transactionReference left join reseller_current_status_additional_info on reseller_current_id = receiverResellerID left join reseller_current_status rec on rec.reseller_id = receiverResellerID  where transactionDate >= DATE_SUB(now(), INTERVAL 4 HOUR) AND std.senderResellerID is not null  AND std.senderResellerID <> '' AND std.receiverResellerID is not null  AND std.receiverResellerID <> '' AND (std.senderResellerID = 'operator' OR std.receiverResellerID = 'operator') ORDER BY transactionDate DESC LIMIT 18446744073709551615) tempTable CROSS JOIN (SELECT @a:= 0) AS a;
jobs.dealerOperatorLog.search.query.param.size=10000
jobs.dealerOperatorLog.search.query.param.lastUpdatedTimestamp=0
jobs.dealerOperatorLog.search.db.query=select sum(lastupdatedtimestamp- 0) as fromDate,UNIX_TIMESTAMP()*1000 as toDate from last_exported_data where jobGroup = 'kyc' and jobName = 'dealerOperatorDump';
jobs.dealerOperatorLog.search.db.query.param=fromDate,toDate


jobs.transferRecon.job_manager=com.seamless.customer.bi.job.GenericTdrExporterJob
jobs.transferRecon.name=TransferReconciliation
jobs.transferRecon.description=Transfer Reconciliation TDR
jobs.transferRecon.schedule=0 0/10 * * * ?
jobs.transferRecon.group=kyc
jobs.transferRecon.provider.columnspecs=columnspecs_transferRecon.properties
jobs.transferRecon.exporter.filenamepattern = TDR_transfer_reconciliation_%1$s.csv
jobs.transferRecon.exporter.exportpath=/var/seamless/spool/tdr
jobs.transferRecon.exporter.filename_date_format = yyyyMMdd-HHmmss
jobs.transferRecon.exporter.csv_separator=,
jobs.transferRecon.max_rows_to_export = 8000
#time in milliseconds
jobs.transferRecon.lastRecordTimeOffset = 300000
jobs.transferRecon.search.query=select result_code, transaction_Profile transactionType, transactionReference, senderMSISDN, rcs.reseller_parent, senderResellerName, receiverMSISDN, receiverResellerName, ROUND(if(transaction_Profile <> 'REVERSE_CREDIT_TRANSFER', amount * 100, 0), 0) amount, ROUND(if(transaction_Profile = 'REVERSE_CREDIT_TRANSFER', amount * 100, 0), 0) reverseAmount, ROUND(amount * 100, 0) SenderDecrease, ROUND(amount * 100, 0) ReceiverIncrease, ROUND(senderBalanceAfter * 100, 0) senderBalanceAfter, IFNULL(transactionDate, '') transactionDate, IFNULL(transaction_end_date, '') transaction_end_date, resultStatus, if(resultStatus <> 'Success', resultDescription, '') errorMsg, IFNULL(dtls.subChannel, std.channel) channel, ROUND(senderBalanceAfter * 100, 0) senderAmountAfter, ROUND(receiverBalanceAfter * 100, 0) receiverAmountAfter, ROUND(resellerCommission * 100, 0) resellerCommission, 0 commission, rcs.reseller_type_id reseller_type_id, receiver_rcs.reseller_type_id receiverResellerType, ROUND(senderBalanceBefore * 100, 0) senderBalanceBefore, ROUND(tax, 0) tax, ROUND(receiverBalanceAfter * 100, 0) receiverBalanceAfter, ROUND(receiverBalanceBefore * 100, 0) receiverBalanceBefore, LEFT(client_comment, 100) client_comment, ROUND(amount * 100, 0) transactionAmount, ROUND(tax_rate, 0) tax_rate, (select MSISDN from reseller_current_status where reseller_id = rcs.reseller_parent) rso_msisdn, sender_cell_id senderCellId, receiver_cell_id receiverCellID, IFNULL(original_ers_reference, '') OrgErsRef from bi.std_daily_transaction_summary_aggregation std left join std_daily_transaction_summary_aggregation_additional_details dtls on dtls.transaction_reference = std.transactionReference left join reseller_current_status rcs on rcs.reseller_id = senderResellerID left join reseller_current_status receiver_rcs on receiver_rcs.reseller_id = receiverResellerID where transactionDate >= DATE_SUB(now(), INTERVAL 10 MINUTE) and transactionType not in ('TOPUP', 'REVERSE_TOPUP') and senderResellerID <> 'operator' ORDER BY transactionDate;
jobs.transferRecon.search.query.param.size=10000
jobs.transferRecon.search.query.param.lastUpdatedTimestamp=0
jobs.transferRecon.search.db.query=select sum(lastupdatedtimestamp- 0) as fromDate,UNIX_TIMESTAMP()*1000 as toDate from last_exported_data where jobGroup = 'kyc' and jobName = 'transferRecon';
jobs.transferRecon.search.db.query.param=fromDate,toDate


jobs.rechargeRecon.job_manager=com.seamless.customer.bi.job.GenericTdrExporterJob
jobs.rechargeRecon.name=rechargeReconciliation
jobs.rechargeRecon.description=Recharge Reconciliation TDR
jobs.rechargeRecon.schedule=*/30 * * * * ?
jobs.rechargeRecon.group=kyc
jobs.rechargeRecon.provider.columnspecs=columnspecs_rechargeRecon.properties
jobs.rechargeRecon.exporter.filenamepattern = TDR_recharge_reconciliation_%1$s.csv
jobs.rechargeRecon.exporter.exportpath=/var/seamless/spool/tdr
jobs.rechargeRecon.exporter.filename_date_format = yyyyMMdd-HHmmss
jobs.rechargeRecon.exporter.csv_separator=,
jobs.rechargeRecon.max_rows_to_export = 8000
#time in milliseconds
jobs.rechargeRecon.lastRecordTimeOffset = 300000
jobs.rechargeRecon.search.query.param.size=10000
jobs.rechargeRecon.search.query.param.lastUpdatedTimestamp=0
jobs.rechargeRecon.search.query=SELECT DISTINCT transactionReference, IF( senderMSISDN = '', 'N/A', senderMSISDN) senderMSISDN, IFNULL(reseller_parent, 'N/A') reseller_parent, IFNULL(reseller_type_id, 'N/A') reseller_type_id, IF ( senderResellerName = '', 'N/A', senderResellerName) senderResellerName, ROUND(IFNULL(amount, 0), 0) amount, IFNULL(receiverMsisdn, 'N/A') receiverMSISDN, CASE WHEN RESOURCE = 'AIRTIME_POSTPAID' THEN RESOURCE ELSE 'AIRTIME' END subscriberType, IFNULL(transactionDate, '0') transactionDate, IFNULL(transaction_end_date, '0') transaction_end_date, IFNULL(std.resultStatus, 'N/A') resultStatus, ROUND( IF ( transaction_Profile = 'REVERSE_TOPUP', amount, 0) , 0) reverseAmount, result_code, IFNULL(std.channel, 'N/A') channel, IFNULL(amount, 0) transactionAmount, IFNULL(amount, 0) rechargeAmount, IFNULL(resellerBonus, 0) resellerBonus, ROUND(senderBalanceBefore, 0) senderBalanceBefore, ROUND(senderBalanceAfter, 0) senderBalanceAfter, IF ( LENGTH(receiverMsisdn) = 11, receiverMsisdn, '0') anonymousId, LEFT( IF ( client_comment = '' OR client_comment IS NULL, 0, client_comment) , 100) client_comment, IFNULL(dtls.transaction_profile, 0) transactionType, IFNULL(account_valid_untill, 0) account_valid_untill, IF ( original_ers_reference = '' OR original_ers_reference IS NULL, 0, original_ers_reference) original_ers_reference, IFNULL(expiry_after_recharge, 0) expiry_after_recharge, IFNULL(expiry_before_recharge, 0) expiry_before_recharge, IFNULL(resellerCommission, 0) resellerCommission, 0 taxRate_percent, ROUND(IFNULL(tax_rate, 0), 0) tax_rate, 0 tax_percent, ROUND(IFNULL(tax, 0), 0) tax, UPPER(RESOURCE) RESOURCE, UPPER(IFNULL( IF ( resource = '', '0', resource) , '0')) product_name, transaction_Profile transactionProfile, IFNULL( ( SELECT MSISDN FROM bi.reseller_current_status WHERE reseller_id = rcs.reseller_parent), 0) parentMSISDN, ROUND(receiverBalanceBefore, 0) ReceiverBalanceBefore, ROUND(receiverBalanceAfter, 0) ReceiverBalanceAfter, IFNULL(std.region , 'N/A') ResellerRegion, IFNULL(std.currency, 'BDT') TransactionCurrency, IFNULL(std.resultDescription, 'N/A') ResultDescription, IFNULL(std.senderResellerID,'N/A') AS 'senderResellerId', IFNULL(std.receiverResellerID,'N/A') receiverResellerId, IFNULL( ( SELECT DISTINCT rc.reseller_type_id FROM bi.reseller_current_status rc WHERE rc.reseller_id = receiverResellerId), 'N/A') AS receiverResellerTypeId, IFNULL(std.receiverResellerName, 'N/A') AS receiverResellerName, IFNULL(std.receiverResellerBonus,'0') AS receiverResellerBonus, IFNULL(std.receiverResellerCommission, '0') AS receiverResellerCommission FROM bi.std_daily_transaction_summary_aggregation std LEFT JOIN bi.std_daily_transaction_summary_aggregation_additional_details dtls ON dtls.transaction_reference = std.transactionReference LEFT JOIN bi.reseller_current_status_additional_info ON reseller_current_id = senderResellerID LEFT JOIN bi.reseller_current_status rcs ON reseller_id = senderResellerID WHERE transactionDate >= DATE_SUB(now(), INTERVAL 10 MINUTE) ORDER BY transactionDate;
jobs.rechargeRecon.search.db.query=select sum(lastupdatedtimestamp- 0) as fromDate,UNIX_TIMESTAMP()*1000 as toDate from last_exported_data where jobGroup = 'kyc' and jobName = 'rechargeRecon';
jobs.rechargeRecon.search.db.query.param=fromDate,toDate

jobs.addkyc.job_manager=com.seamless.customer.bi.job.TdrExporterJob
jobs.addkyc.name=KYC
jobs.addkyc.description=KYC Job
jobs.addkyc.schedule=0 */3 * ? * *
jobs.addkyc.group=sfo
jobs.addkyc.provider.columnspecs=columnspecs_kyc.properties
jobs.addkyc.exporter.filenamepattern = TDR_ADDKYC_%1$s.csv
jobs.addkyc.exporter.exportpath=/var/seamless/spool/tdr
jobs.addkyc.exporter.filename_date_format = yyyyMMdd-HHmmss
jobs.addkyc.exporter.csv_separator=,
#jobs.kyc.exporter.csv_quotechar="
#
#set max rows to export to multiples of 10,000 if the value you want is > 10,000 ex: 20000,40000 etc
jobs.addkyc.max_rows_to_export = 30000
#time in milliseconds
jobs.addkyc.lastRecordTimeOffset = 300000
jobs.addkyc.index_pattern=kyc_
#jobs.addkyc.search.query={"size": 40, "query": {"match_all": {}}, "sort": [{"lastUpdatedTimestamp": {"order": "asc"}}]}

jobs.addkyc.search.query={"elasticIndex":{"indexName":"kyc_","isDataWeeklyIndexed":true},"elasticQuery":{"query":{"bool":{"filter":[{"range":{"lastUpdatedTimestamp":{"from":"<:fromDate:>","to":"<:toDate:>","include_lower":true,"include_upper":true,"boost":1}}}],"must_not":[{"match":{"transactionNumber":{"query":"<:ersReference:>","operator":"OR","prefix_length":0,"max_expansions":50,"fuzzy_transpositions":true,"lenient":false,"zero_terms_query":"NONE","auto_generate_synonyms_phrase_query":true,"boost":1}}}],"adjust_pure_negative":true,"boost":1}},"sort":[{"lastUpdatedTimestamp":{"order":"asc"}}]}}
#jobs.addkyc.search.query={"query":{"bool":{"filter":[{"range":{"lastUpdatedTimestamp":{"from":<:lastUpdatedTimestamp:>,"to":null,"include_lower":true,"include_upper":true,"boost":1.0}}}],"must_not":[{"match":{"transactionNumber":{"query":"<:ersReference:>","operator":"OR","prefix_length":0,"max_expansions":50,"fuzzy_transpositions":true,"lenient":false,"zero_terms_query":"NONE","auto_generate_synonyms_phrase_query":true,"boost":1.0}}}],"adjust_pure_negative":true,"boost":1.0}},"sort":[{"lastUpdatedTimestamp":{"order":"asc"}}]}
jobs.addkyc.search.query.param.fromDate=0

jobs.addkyc.search.db.query=select sum(lastupdatedtimestamp- 0) as fromDate,UNIX_TIMESTAMP()*1000 as toDate,ersReference from last_exported_data where jobGroup = 'sfo' and jobName = 'KYC';
jobs.addkyc.search.db.query.param=fromDate,ersReference,toDate

jobs.totalkycsales.job_manager=com.seamless.customer.bi.job.TotalKycSalesJob
jobs.totalkycsales.name=KYCsales
jobs.totalkycsales.description=KYC Sales Job
jobs.totalkycsales.schedule=0 */2 * ? * *
jobs.totalkycsales.group=kyc
jobs.totalkycsales.provider.columnspecs=columnspecs_total_kyc.properties
jobs.totalkycsales.exporter.filenamepattern = TDR_TOTAL_ADDKYC_%1$s.csv
jobs.totalkycsales.exporter.exportpath=/var/seamless/spool/tdr
jobs.totalkycsales.exporter.filename_date_format = yyyyMMdd-HHmmss
jobs.totalkycsales.exporter.csv_separator=,
#jobs.kyc.exporter.csv_quotechar="c
jobs.totalkycsales.max_rows_to_export = 8000
#time in milliseconds
jobs.totalkycsales.lastRecordTimeOffset = 300000
#jobs.totalkycsales.index_pattern=kyc_*
#jobs.addkyc.search.query={"size": 40, "query": {"match_all": {}}, "sort": [{"lastUpdatedTimestamp": {"order": "asc"}}]}
jobs.totalkycsales.search.query={"elasticIndex":{"indexName":"kyc_","isDataWeeklyIndexed":false},"elasticQuery":{"size":0,"query":{"bool":{"filter":[{"terms":{"eventName.keyword":["ADD_KYC"],"boost":1}},{"terms":{"resultCode":["0"],"boost":1}},{"range":{"lastUpdatedTimestamp":{"from":"<:lastUpdatedTimestamp:>","to":null,"include_lower":true,"include_upper":false,"boost":1}}}],"adjust_pure_negative":true,"boost":1}},"aggregations":{"TotalKycSales":{"composite":{"size":10000,"sources":[{"timestamp":{"date_histogram":{"field":"timestamp","missing_bucket":true,"value_type":"date","format":"iso8601","order":"asc","fixed_interval":"1d"}}},{"PosId":{"terms":{"field":"user.userId.keyword","missing_bucket":true,"order":"asc"}}},{"brand":{"terms":{"field":"kyc.brandName.keyword","missing_bucket":true,"order":"asc"}}}]}}}}}
jobs.totalkycsales.search.query.param.size=10000
jobs.totalkycsales.search.query.param.lastUpdatedTimestamp=0
jobs.totalkycsales.search.db.query=select sum(lastupdatedtimestamp- 300000) as lastUpdatedTimestamp,ersReference from last_exported_data where jobGroup = 'sfo' and jobName = 'KYC';
jobs.totalkycsales.search.db.query.param=lastUpdatedTimestamp

# ****************************** SCC Report Jobs STARTS ******************************

#Commission details report per campaign criteria achievement
jobs.CommissionDetails.job_manager=com.seamless.customer.bi.job.TdrExporterJob
jobs.CommissionDetails.name=CommissionDetails
jobs.CommissionDetails.description= job to fetch commission details per campaign criteria achievement
jobs.CommissionDetails.schedule=0/10 * * * * ?
jobs.CommissionDetails.group=scc
jobs.CommissionDetails.provider.columnspecs=columnspecs_Comission_Details.properties
jobs.CommissionDetails.exporter.filenamepattern = SCC_Commission_Details_%1$s.csv
jobs.CommissionDetails.exporter.exportpath=/var/seamless/spool/tdr
jobs.CommissionDetails.exporter.filename_date_format =yyyyMMdd-HHmmss
jobs.CommissionDetails.exporter.csv_separator=|
jobs.CommissionDetails.max_rows_to_export=8000
#time in milliseconds
jobs.CommissionDetails.lastRecordTimeOffset=300000
jobs.CommissionDetails.search.query={"elasticIndex":{"indexName":"data_lake_","isDataWeeklyIndexed":true},"elasticQuery":{"query":{"bool":{"filter":[{"range":{"lastUpdatedTimestamp":{"from":"<:fromDate:>","to":"<:toDate:>","include_lower":false,"include_upper":true,"boost":1}}}],"must":[{"match":{"eventName":"COMMISSION_PAYOUT"}},{"match":{"payout.stateName":"PROCESSED"}}],"must_not":[{"match":{"transactionNumber":{"query":"<:ersReference:>","operator":"OR","prefix_length":0,"max_expansions":50,"fuzzy_transpositions":true,"lenient":false,"zero_terms_query":"NONE","auto_generate_synonyms_phrase_query":true,"boost":1}}}],"adjust_pure_negative":true,"boost":1}},"sort":[{"lastUpdatedTimestamp":{"order":"asc"}}]}}
jobs.CommissionDetails.search.query.param.size=10000
jobs.CommissionDetails.search.query.param.fromDate=0
jobs.CommissionDetails.search.db.query=select sum(lastupdatedtimestamp- 0) as fromDate,UNIX_TIMESTAMP()*1000 as toDate,ersReference from last_exported_data where jobGroup = 'scc' and jobName = 'CommissionDetails';
jobs.CommissionDetails.search.db.query.param=fromDate,ersReference,toDate
jobs.CommissionDetails.timestamp.field=startTime
jobs.CommissionDetails.transactionNumber.field=transactionNumber

#Commission health control report (reseller wise transaction count and amount consumed to achieve campaign criteria)
jobs.CommissionHealthControl.job_manager=com.seamless.customer.bi.job.GenericTdrExporterJob
jobs.CommissionHealthControl.name=CommissionHealthControl
jobs.CommissionHealthControl.description=Job to fetch reseller wise commission health
jobs.CommissionHealthControl.schedule=0 */3 * ? * *
jobs.CommissionHealthControl.group=scc
jobs.CommissionHealthControl.provider.columnspecs=columnspecs_healthControl.properties
jobs.CommissionHealthControl.exporter.filenamepattern.sequence.enable=true
jobs.CommissionHealthControl.exporter.filenamepattern.sequence=SCC_Commission_Health_Control-%2$s-%1$s.csv
jobs.CommissionHealthControl.exporter.filenamepattern.sequence.name=SCC_Commission_Health_Control
jobs.CommissionHealthControl.exporter.exportpath=/var/seamless/spool/tdr
jobs.CommissionHealthControl.exporter.filename_date_format=yyyyMMddHHmmss
jobs.CommissionHealthControl.exporter.csv_separator=|
jobs.CommissionHealthControl.max_rows_to_export=10000
jobs.CommissionHealthControl.lastRecordTimeOffset=300000
#time in milliseconds
jobs.CommissionHealthControl.search.query=SELECT * FROM bi.health_control_info where date(date_inserted) = CURRENT_DATE() ;

#On hold reseller pending payment report
jobs.SCCPendingPayment.job_manager=com.seamless.customer.bi.job.TdrExporterJob
jobs.SCCPendingPayment.name=SCCPendingPayment
jobs.SCCPendingPayment.description= job to fetch on hold payment transactions
jobs.SCCPendingPayment.schedule=0/10 * * * * ?
jobs.SCCPendingPayment.group=scc
jobs.SCCPendingPayment.provider.columnspecs=columnspecs_Payment_Pending.properties
jobs.SCCPendingPayment.exporter.filenamepattern = Scc_Pending_Payment_%1$s.csv
jobs.SCCPendingPayment.exporter.exportpath=/var/seamless/spool/tdr
jobs.SCCPendingPayment.exporter.filename_date_format =yyyyMMdd-HHmmss
jobs.SCCPendingPayment.exporter.csv_separator=|
jobs.SCCPendingPayment.max_rows_to_export=8000
#time in milliseconds
jobs.SCCPendingPayment.lastRecordTimeOffset=300000
jobs.SCCPendingPayment.search.query={"elasticIndex":{"indexName":"data_lake_","isDataWeeklyIndexed":true},"elasticQuery":{"query":{"bool":{"filter":[{"range":{"lastUpdatedTimestamp":{"from":"<:fromDate:>","to":"<:toDate:>","include_lower":false,"include_upper":true,"boost":1}}}],"must":[{"wildcard":{"payout.stateName":{"value":"PAYOUT_ON_HOLD"}}}],"must_not":[{"match":{"transactionNumber":{"query":"<:ersReference:>","operator":"OR","prefix_length":0,"max_expansions":50,"fuzzy_transpositions":true,"lenient":false,"zero_terms_query":"NONE","auto_generate_synonyms_phrase_query":true,"boost":1}}}],"adjust_pure_negative":true,"boost":1}},"sort":[{"lastUpdatedTimestamp":{"order":"asc"}}]}}
jobs.SCCPendingPayment.search.query.param.size=10000
jobs.SCCPendingPayment.search.query.param.fromDate=0
jobs.SCCPendingPayment.search.db.query=select sum(lastupdatedtimestamp- 0) as fromDate,UNIX_TIMESTAMP()*1000 as toDate,ersReference from last_exported_data where jobGroup = 'scc' and jobName = 'SCCPendingPayment';
jobs.SCCPendingPayment.search.db.query.param=fromDate,ersReference,toDate
jobs.SCCPendingPayment.timestamp.field=startTime
jobs.SCCPendingPayment.transactionNumber.field=ersReference

# ****************************** SCC Report Jobs ENDS ******************************
