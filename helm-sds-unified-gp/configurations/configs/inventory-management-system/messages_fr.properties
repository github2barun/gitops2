## Inventory Related
inventory.type.not.found=[fr]Inventory type not found for: {0}
inventory.table.not.found=[fr]Inventory table not found for type: {0}
inventory.not.found=[fr]No inventory found for provided search criteria.
inventory.non.serialized.already.exist=[fr]Non serialized inventory item already exist with productId[{0}], ownerId[{1}], locationId[{2}], employeeId[{3}] and data[{4}]
inventory.non.serialized.error=[fr]Unable to create non serialized inventory: {0}
inventory.item.not.found=[fr]Inventory item not found with type {0} , id {1}
inventory.get.exception=[fr]Got exception: {0}
inventory.update.exception=[fr]Unable to update non serialized inventory with inventory id: {0}
inventory.delete.exception=[fr]Unable to delete non serialized inventory: {0}
inventory.non.serialized.fetch.success=[fr]Non-Serialized Inventory fetched Successfully
inventory.non.serialized.create.success=[fr]Non-Serialized Inventory created Successfully
inventory.non.serialized.update.success=[fr]Non-Serialized Inventory updated Successfully
inventory.non.serialized.delete.success=[fr]Non-Serialized Inventory deleted Successfully
inventory.non.serialized.uom.not.blank=[fr]Unit of measurement cannot be empty for non-serialized inventory
inventory.non.serialized.quantity.valid=[fr]Quantity should be positive for non-serialized inventory
inventory.serialized.fetch.success=[fr]Serialized Inventory fetched Successfully
inventory.serialized.create.success=[fr]Serialized Inventory created Successfully
inventory.serialized.update.success=[fr]Serialized Inventory updated Successfully
inventory.serialized.delete.success=[fr]Serialized Inventory deleted Successfully
inventory.serialized.serial.valid=[fr]Serial number cannot be empty for serialized inventory
inventory.serialized.fetch.pattern.not.found=[fr]No stock found with the pattern
inventory.serialized.inventoryIdType.valid=[fr]inventoryIdType can't be empty
inventory.serial.duplicate.found=[fr]An inventory already exists with same product-id[{0}] and serial number[{1}] combination
inventory.trackable.non.serialized.startno.not.valid=[fr]Start serial number [{0}] for trackable non serialized inventory is invalid
inventory.trackable.non.serialized.endno.not.valid=[fr]End serial number [{0}] for trackable non serialized inventory is invalid
inventory.trackable.non.serialized.range.not.valid=[fr]End serial number [{0}] should not be less than start no [{1}] for trackable non serialized inventory
inventory.trackable.non.serialized.already.exist=[fr]Non serialized inventory item already exist with productId[{0}], ownerId[{1}], locationId[{2}], batchId[{3}], start serial[{4}] and end serial[{5}]
inventory.trackable.non.serialized.fetch.success=[fr]Trackable-Non-Serialized Inventory fetched Successfully
inventory.trackable.non.serialized.create.success=[fr]Trackable-Non-Serialized Inventory created Successfully
inventory.trackable.non.serialized.update.success=[fr]Trackable-Non-Serialized Inventory updated Successfully
inventory.trackable.non.serialized.delete.success=[fr]Trackable-Non-Serialized Inventory deleted Successfully
inventory.filter.key.invalid=[fr]Filter Key {0} is not valid
inventory.sort.key.invalid=[fr]Sort Key {0} is not valid
owner.inventory.not.found=[fr] Could not find inventory with given owner and state name
inventory.not.owned.by.logged.in.user=[fr]Inventory doesn't belong to logged in user
child.resellers.inventory.view.not.allowed=[fr]Child resellers inventory view is not allowed
child.reseller.ids.not.valid=[fr]Invalid child reseller ids provided
dms.api.call.failure=[fr]Unable to fetch child resellers
vms.api.call.failure=[fr]Unable to update products status in VMS
ic.api.call.failure=[fr]Unable to block vouchers in IC
notification.call.failure=[fr]Unable to send notification
inventory.upload.error=[fr]Failed to upload inventory
## Inventory Request
inventory.type.not.valid=[fr]The provided inventory type [{0}] is not valid
inventory.serialized.serial.not.blank=[fr]The serial number can not be blank for an inventory of type [serialized]
inventory.nonserialized.quantity.not.blank=[fr]The quantity for any inventory of type[nonserialized] can not be less than zero
inventory.product.not.blank=[fr]productId for any inventory can not be zero
inventory.product.min.value=[fr]productId for any inventory has to be a non zero positive number
inventory.ownerId.not.blank=[fr]OwnerId should not be blank
inventory.product.not.empty=[fr]The 'productId' can not be empty
inventory.lot.not.empty=[fr]The 'batchId' for the inventory can not be blank
inventory.type.not.empty=[fr]The 'type' of inventory can not be blank
inventory.owner.not.empty=[fr]The 'Owner' can not be empty for any inventory
inventory.uom.max.length=[fr]The 'uom' string length should be less than or equal to 10
inventory.uom.not.empty=[fr]The 'uom' of non-serialized inventory can not be blank
inventory.quantity.max=[fr]The 'quantity' should be less than 10^15
inventory.state.name.not.empty=[fr]The 'stateName' can not be empty for any inventory
inventory.id.not.blank=[fr]The 'inventoryId' can not be blank or less than one
inventory.fetch.error=[fr]Error in fetching inventory with id [{0}]
inventory.add.error=[fr]Error in adding inventory
inventory.update.error=[fr]Error in updating inventory
inventory.delete.error=[fr]Error in deleting inventory
inventory.fetch-all.success=[fr]All inventories are fetched successfully for product-id [{0}]
inventory.fetch.success=[fr]All inventories are fetched successfully
inventory.fetch-all.error=[fr]Error in fetching all inventories for product-id [{0}]
inventory.summary.fetch.success=[fr]Inventory summary fetched successfully
inventory.summary.fetch.error=[fr]Error in fetching inventory summary
inventory.fetch.loggedin.user.token.invalid=[fr]Invalid token provided
inventory.fetchChildStock.not.valid=[fr]fetchChildStock must be provided
inventory.childResellerIds.not.valid=[fr]childResellerIds must be provided
inventory.childResellerIds.mismatch=[fr]Some childResellerIds are invalid
inventory.header.system.token.not.valid=[fr]system-token value must be provided
inventory.header.authorization.not.valid=[fr]authorization value must be provided
inventory.validation.error=[fr] The inventory does not belong to logged in user
inventory.query.param.page.size.invalid=[fr]specifies the page size
inventory.query.param.page.number.invalid=[fr]specifies the page number
inventory.not.available=[fr]Requested inventory is not available
inventory.invalid.new.boxId=[fr]new box id in request is in already assigned.
inventory.not.found.createBox=[fr]No serial number found to create box
inventory.body.request.productSKU.invalid=[fr]productSKU must be provided
inventory.search.product.invalid=[fr]productSKU or productCode must be provided
inventory.search.searchType.not.null=[fr]searchType must be provided
inventory.search.fetch.success=[fr]fetched all results matching search criteria
inventory.body.request.updateFields.invalid=[fr]updateFields is missing
inventory.body.request.searchFields.invalid=[fr]searchFields is missing
inventory.request.body.searchFields.productSKU.invalid=[fr]productSKU must be provided
inventory.request.body.updateFields.invalid=[fr]updateFields is missing
inventory.request.body.searchFields.invalid=[fr]searchFields is missing
inventory.request.body.searchFields.inventoryIdType.invalid=[fr]inventoryIDType must be provided
inventory.request.body.searchFields.serials.invalid=[fr]serials field must be provided
inventory.request.body.searchFields.range.invalid=[fr]range must be provided
inventory.request.body.searchFields.quantity.invalid=[fr]quantity must be provided
inventory.request.body.searchFields.batchIds.invalid=[fr]batchIds must be provided
inventory.request.body.searchFields.inventoryIds.invalid=[fr]inventoryIds must be provided
inventory.request.body.searchFields.status.invalid=[fr]searchFields(status) must be provided
inventory.request.body.searchFields.ownerId.invalid=[fr]searchFields(ownerId) must be provided
inventory.request.body.range.inventoryFrom.invalid=[fr]inventory_From should not be null
inventory.request.body.range.inventoryTo.invalid=[fr]inventory_To should not be null
inventory.request.body.range.invalid.values=[fr]range_To should not greater than range_From
inventory.request.body.updatedFields.ownerId.invalid=[fr]ownerId must be provided
inventory.request.body.updatedFields.location.invalid=[fr]location must be provided
inventory.request.body.updatedFields.status.invalid=[fr]status must be provided
inventory.request.body.updatedFields.location.length.invalid=[fr]location length is invalid
inventory.request.body.updatedFields.ownerId.length.invalid=[fr]ownerId length is invalid
inventory.request.body.updatedFields.status.length.invalid=[fr]status length is invalid
inventory.request.body.updatedFields.updateReason.length.invalid=[fr]Reason can not be more than 1000 chars
inventory.request.body.searchFields.status.not.found=[fr]searchFields(status) is invalid
inventory.request.body.searchFields.invalid.values=[fr]From updating fields(ownerId,location,status), at least one must be provided
inventory.request.body.searchFields.range.values=[fr]inventory_From must be less than inventory_To
inventory.request.body.searchFields.serial.or.batch.id.allowed=[fr]From search params(serials,batch id\'s, range) only one must be provided
inventory.request.from.and.toState.are.invalid=[fr]No valid state found for the serial ids. Transition failed for serial: {0}
inventory.request.state.transitions.not.found=[fr]No state transitions found for products
inventory.request.state.transitions.not.valid=[fr]For some inventories, no valid state transition found
inventory.request.body.searchFields.ownerId.value.invalid=[fr]Invalid owner id provided in search criteria
serialized.inventory.update.reason.invalid.length=[fr]updateReason length is invalid
config.property.is.missing=[fr] Config property [{0}] is missing
inventory.filter.invalid=[fr] filters must be provided
inventory.request.filter.key.invalid=[fr]filters key should not be null
inventory.request.param.order.by.invalid=[fr]orderBy value is must be provided
inventory.request.param.order.invalid=[fr]order value is invalid
inventory.request.body.filter.column.not.configured=[fr]filter column [{0}] is not configured
inventory.request.body.filter.column.duplicate=[fr]duplicate filters not allowed
inventory.request.param.order.by.not.allowed=[fr] Order by field [{0}] is not allowed
inventory.request.filter.operation.invalid=[fr]Operation must be provided for filter
inventory.request.body.filter.operation.not.configured=[fr]Operation [{0}] is not configured
inventory.request.body.filter.startSerial.endSerial.quantity=[fr] [{0}] must be integer
sim.number.not.valid=[fr]Please provide valid sim number
productid.not.valid=[fr]ProductSKU is invalid
inventory.request.body.filter.operation.not.allowed=[fr]Operation [{0}] is not allowed for Quantity,StartSerial and EndSerial
invalid.workflow.state=[fr]There is not state transition from {0} to Sold state
msisdn.not.valid=[fr] Msisdn [{0}] is invalid
msisdn.brandCode.not.valid=[fr]MSISDN brand code [{1}] is mismatched with SIM brand code[{0}]
inventory.request.body.filter.invalid.format=[fr]Provided filter {0}:{1} has invalid format. Required format is {2}
inventory.count.request.invalid.ownertype=[fr]Invalid ownerType provided

## Owner Controller
owner.id.not.blank=[fr]Owner id can not be blank
owner.not.found=[fr]No owner found with ownerId [{0}]
owner.not.active=[fr]Owner is not active for ownerId [{0}]
owner.fetch-inventory-count.success=[fr]Inventory count successfully fetched for owner [{0}]

## Location Related
owner.locations.multiple.found=[fr]Multiple locations found for owner[{0}], please provide location id
owner.location.already.registered=[fr]Location id[{0}] is already registered with some owner[{1}]
owner.locations.not.found=[fr]No Location found with locationId [{0}]

## Bulk Upload
import.file.not.provided=[fr]The File is not provided
import.file.extension.validation=[fr]File Should be in CSV format
jobName.not.blank=[fr]JobName should not be blank
action.not.blank=[fr]Action should not be blank
action.not.valid=[fr]The provided action is not valid
import.job.upload.success=[fr]Import started. You can check latest status for File {0}
import.job.fetch.success=[fr]The Job {0} is fetched successfully.
import.job.resource.data.error=[fr]Error occurred in fetching resource uploaded data
import.job.upload.error=[fr]Error in bulk upload of inventory
import.job.status.fetch.error=[fr]Error in fetching the job status for [{0}]
import.job.approve.error=[fr]Error in approving the inventory upload for job [{0}]
import.job.reject.error=[fr]Error in rejecting the inventory upload for job [{0}]
import.jobs.fetch.error=[fr]Error in fetching all imported jobs
import.jobs.fetch.all.success=[fr]All Jobs fetched successfully
import.job.approve.success=[fr]Import approved for File {0}
import.job.reject.success=[fr]Import rejected for File {0}
import.job.status.fetch.success=[fr]Successfully fetched import status for File {0}
import.owner.error=[fr]Error occurred in fetching owner data
inventory.activation.resource.data.error=[fr]Error occurred in fetching resource uploaded data
import.activation.upload.success=[fr]Activation Import started. You can check latest status for File {0}

## Inventory Operations
inventory.reserve.failed=[fr]Failed to reserve inventory for the product [{0}]
inventory.operation.error=[fr]Error performing operation on inventory
inventory.serialized.stage.changed.to.intransit=[fr]Stock associated with the reference number[{0}] and having the provided product-inventory identifiers have been marked in-transit under ownership of [{1}]
inventory.serialized.stage.changed.to.delivered=[fr]Stock associated with the reference number[{0}] and having the provided product-inventory identifiers have been delivered to owner[{1}] at configured location {2}
inventory.fetch.by.refNo.success=[fr]Successfully fetched inventory for refNo: {0}
inventory.serialized.stage.update.error=[fr]The actual update count [{0}] and the expected update count [{1}] do not match
inventory.serialized.stage.changed.to.deposited=[fr]Stock associated with the reference number[{0}] and having the provided product-inventory identifiers have been deposited to owner[{1}] at configured location {2}
inventory.transfer.serialrange.count.is.zero=[fr]Transfer inventory count is zero for productId [{0}] and SerialRange start from [{1}] to [{2}]
inventory.reserve.refNo.not.blank=[fr]The 'refNo' for the reserve request should not be blank
inventory.reserve.not.empty=[fr]Inventory Reserve list should not be empty
inventory.reserve.type.not.valid=[fr]Inventory reserveType is not valid, Valid value are SERIAL/BATCH/RANGE/FIFO/LIFO.
inventory.reserve.quantity.not.found=[fr]Quantity is not found at row [{0}]
inventory.reserve.product.duplicate=[fr]Duplicate product id at row [{0}]
inventory.reserve.quantity.serial.not.found=[fr]Both Quantity or Serial nos not found at row [{0}]
inventory.reserve.serial.not.blank=[fr]Serial no should not be blank at row [{0}]
inventory.reserve.serial.duplicate.found=[fr]Some serial no {0} found duplicate, provide unique serial no
inventory.reserve.quantity.serial.count.not.matched=[fr]Quantity must be equal to the inventory being reserved
inventory.reserve.failed.due.to.quantity.mismatch=[fr]Inventory count is not available to reserve, required: {0}  || available: {1}
inventory.non.serialized.not.found=Inventory not found
inventory.non.serialized.quantity.not.available=Requested quantity is not available.
nonserialized.inventory.reserve.type.not.valid=Inventory reserveType is not valid for non serialized, Valid value are NON_SERIALIZE/FIFO/LIFO.
inventory.trackable.non.serialized.invalid.range=[fr]Provided invalid range criteria for reserve [{0} - {1}]
party.id.not.blank=[fr]seller id should not be blank
seller.not.null=[fr]Seller Information should not be empty
inventory.reserve.error=[fr]Failed to reserve inventory for the refNo [{0}]
inventory.reserve.success=[fr]Inventory reserved successfully for the refNo [{0}]
inventory.reserve.range.not.valid=[fr]Start serial number [{0}] should not be greater than end serial number [{1}] in Ranges
inventory.reserve.range.not.parsable=[fr]Only numeric serials are supported for ReserveType RANGE
inventory.release.error=[fr]Error in releasing inventories for refNo [{0}]
inventory.scheduled.release.error=Error in releasing inventories in IMSScheduler
inventory.release.refNo.not.blank=[fr]The 'refNo' for the release request should not be empty
inventory.release.inventory.duplicate.found=[fr]Some inventoryIds {0} found duplicate, provide unique inventory id
inventory.release.inventoryIds.not.empty=[fr]The 'inventoryIds' for the release request should not be empty
inventory.release.success=[fr]Inventory released successfully for the refNo [{0}]
inventory.error.mark.intransit=[fr]Error in marking inventory as in-transit
inventory.error.mark.delivery=[fr]Error in delivering inventory
inventory.error.mark.deposit=[fr]Error in depositing inventory at collector
inventory.fetch.by.refNo.error=[fr]Error while fetching inventory by refNo [{0}]
inventory.transfer.fetched.success=[fr]Inventory Transfers fetched successfully
inventory.transfer.error=[fr]Error in transferring inventory
inventory.transfer.success=[fr]Transfer successful. Ref ID: {0}
inventory.batch.list.not.zero=[fr]Batch list or serial list or serial range list count should not be zero
inventory.batch.id.list.not.zero=[fr]Batch id list count should not be zero
inventory.serial.no.list.not.zero=[fr]Serial number list count should not be zero
inventory.serial.no.range.start.end.list.not.zero=[fr]Serial number range must have valid start-end serial number
inventory.transfer.fetched.error=[fr]Error in fetching transfers history
inventory.operations.item.identifier.not.blank=[fr]The identifier for the product should not be empty
inventory.operations.item.id.not.null=[fr]The identifier for inventory against some product can not be empty
inventory.operations.item.id.min.value=[fr]the identifier for the inventory can not be zero or negative number
inventory.operations.item.refNo.not.blank=[fr]can not update stock without some reference no
inventory.list.product.type.invalid=[fr]List of product-identifiers contains products of invalid type: [{0}]
inventory.reserve.product.state.not.exist=[fr]Either some states {0} or some products {1} are not exist
inventory.search.type.not.valid=[fr]The search type is not valid
inventory.against.ref.not.found=[fr]Refno[{0}] has no inventory marked against it
inventory.release.product.sku.error=[fr]error in releasing inventory for productSKU[{0}]. reverting changes.
inventory.item.not.available=[fr]No Inventory available for product SKU {0} to reserve
inventory.operation.reserve.not.allowed=[fr]Reserve inventory operation not allowed on product [{0}]
inventory.inventory-count.error=[fr]Unable to fetch inventories count
invalid.product.type= product type is not correct
invalid.product.type.serialized= product type is not correct. serialized must be included
invalid.product.type.serialized.or.trackablenonserialized= product type is not correct. serialized or trackable_nonserialized must be included
invalid.product.type.trackablenonserialized= product type is not correct. trackable_nonserialized must be included
inventory.operation.request.not.exist.by.refNo.and.owner=[fr]No Inventory exist for the owner [{0}] with ref no [{1}]
inventory.operation.request.toOwnerId.not.empty=[fr]toOwnerId for the stock can not be empty
inventory.operation.request.fromOwnerId.not.empty=[fr]fromOwnerId for the stock can not be empty
inventory.reserve.unable.to.search.bi.lake=[fr]Unable to search range [{0}-{1}] in BiLake for productSKU [{3}]

############## Request Validation Message ############
## Workflow Request
workflow.name.not.blank=[fr]The name of the workflow can not be blank
workflow.states.not.empty=[fr]The 'states' should not be empty, at-least two states are required
workflow.transition.not.empty=[fr]The 'transition' should not be empty, at-least one transition is required
workflow.state.name.not.blank=[fr]The name of the workflow state can not be blank
workflow.transition.from.not.blank=[fr]The 'From' state in the transition can not be blank
workflow.transition.to.not.blank=[fr]The 'To' state in the transition can not be blank
workflow.two.states=[fr]At-least two workflow-states are required in states
workflow.one.transition=[fr]At-least one transition is required
workflow.unique.state=[fr]State name should be unique in a workflow
workflow.transition.self.loop=[fr]Self-loop transition 'From' [{0}] and 'To' [{1}] is not allowed
workflow.transition.self.loop.not.exist=[fr]Self-loop transition 'From' [{0}] and 'To' [{1}] is not found system
workflow.id.not.blank=[fr]The workflowId should be greater than zero
workflow.state.id.not.blank=[fr]The workflowStateId should be greater than zero
workflow.fetch.success=[fr]Workflow fetch successfully
workflow.create.success=[fr]Workflow create successfully
workflow.update.success=[fr]Workflow update successfully
workflows.fetch.success=[fr]All workflows fetched successfully
workflow.state.update.success=[fr]Workflow state updated successfully
workflow.fetch.error=[fr]Error in fetching workflow details
workflow.add.error=[fr]Error in adding workflow details
workflow.update.error=[fr]Error in updating workflow with id [{0}]
workflow.state.update.error=[fr]Error in updating state of workflow with id [{0}]
workflow.delete.error=[fr]Unable to delete [{0}], as some products are using this workflow
workflow.delete.success=[fr]Workflow Deleted Successfully
workflow.already.exist=[fr]Workflow name[{0}] already exists, choose different name
workflow.not.exist=[fr]Workflow [{0}] does not exist
workflow.state.already.exist=[fr]Workflow State [{0}] already exists in this workflow
workflow.state.id.not.exist=[fr]WorkflowState [{0}] does not exist
workflow.state.name.not.exist=[fr]WorkflowState [{0}] does not exist in the product workflow
workflow.transition.from.state.not.exist=[fr]Transition 'From' [{0}] state not found in workflow state
workflow.transition.to.state.not.exist=[fr]Transition 'To' [{0}] state not found in workflow state
workflow.remove.transition.not.exist=[fr]Remove transition[From: {0}, To: {1}] does not exist
workflow.op.transition.from.not.exist=[fr]{0} transition 'From' state doesn't exist
workflow.op.transition.to.not.exist=[fr]{0} transition 'To' state doesn't exist
workflow.state.id.not.exist.in.workflow=[fr]Either workflowId or workflow state doesn't exist in this workflow
workflow.state.not.exist=[fr]No states were found.
workflow.transition.reservation.not.found=[fr]valid transitions for reservation do not exist for productSKU [{0}]
workflow.transition.transfer.not.found=[fr]No valid transition found for transfer operation for workflow [{0}]
workflow.transition.transfer.notfound=[fr]No valid transition found for transfer operation
workflow.product.sku.not.found=[fr]Workflows for some products are missing in the system [{0}]"
workflow.release.stage.not.found=[fr]no release stage found for workflow [{0}]
workflow.state.not.found=[fr]state [{0}] not found for workflow with id [{1}]
workflow.state.product.sku.not.found=[fr]State [{0}] not found for products [{1}]
workflow.transition.product.sku.from.state.not.exist=[fr]No valid transitions found for product[{0}] from current state [{1}]
## Tax Related
tax.type.not.blank=[fr]Tax should not be blank
tax.percent.value.invalid=[fr]invalid percent tax value provided, provide like 12.45
tax.fixed.value.invalid=[fr]invalid fixed amount tax provided, provide like 25.00
tax.percent.fixed.not.zero=[fr]Both Fields (percentValue, fixedValue) should not be 0.00
tax.percent.fixed.validation=[fr]Both Fields (percentValue, fixedValue) should not be greater than 0.00
tax.fetch.error=[fr]Error in fetching tax with id [{0}]
tax.fetch.all.error=[fr]Error in fetching all taxes
tax.add.error=[fr]Error in adding tax
tax.update.error=[fr]Error in updating tax with id [{0}]
tax.delete.error=[fr]Error in deleting tax with id [{0}]
tax.fetch.success=[fr]Tax fetch successfully
tax.create.success=[fr]Tax create successfully
tax.update.success=[fr]Tax update successfully
tax.fetch.all.success=[fr]All taxes fetched successfully
tax.not.exist=[fr]Tax [{0}] does not exist
tax.delete.success=[fr]Tax Deleted Successfully
tax.exist.in.product=[fr]Tax [{0}] is already associated with some products

## Product Request
product.workflow.parent.not.blank=[fr]Both Field (ParentId, WorkflowId) should not be blank
product.name.not.blank=[fr]The product 'name' can not be blank
product.type.not.valid=[fr]The product 'type' is not valid
product.price.value.invalid=[fr]Invalid unit price provided, provide like 999.99
product.uom.max.length=[fr]The 'uom' string length should be less than or equal to 20
product.price.not.blank=[fr]The product 'unitPrice' should not be blank for product type [{0}]
product.uom.not.blank=[fr]The product 'uom' should not be blank for product type [{0}]
product.id.not.blank=[fr]The 'productId' can not be blank or less than zero
product.new.parent.not.blank=[fr]The 'newParentId' can not be blank or less than one
product.move.request.validation=[fr]ProductId and Parent productId can not be same
product.fetch.success=[fr]Product fetch successfully
product.update.success=[fr]Product update successfully
product.create.success=[fr]Product create successfully
product.fetch.error=[fr]Error in fetching details of product [{0}]
product.add.error=[fr]Error in adding product
product.update.error=[fr]Error in updating product [{0}]
product.delete.error=[fr]Error in deleting product [{0}]
product.move.error=[fr]Error in moving product [{0}]
products.fetch.error=[fr]Error in fetching products for productId {0}
products.fetch.success=[fr]Products fetched successfully for respective productIds.
products.fetch-all.error=[fr]Error in fetching all products list.
products.fetch-all.success=[fr]All products fetched successfully.
product.fetch.duplicate.ids=[fr]The product ids {0} should be unique
product.identifier.not.blank=[fr]The product identifier should not be blank for product type [{0}]
product.moved.success=[fr]Product-id [{0}] is moved successfully
product.child.not.found=[fr]This product-id [{0}] is not found as a leaf product
product.delete.success=[fr]Product is deleted successfully [{0}]
product.inventory.exist.error=[fr]There are some inventory associated with this product [{0}]
product.not.found=[fr]Product not found with product sku [{0}]
product.active.not.found=[fr]Active Product not found with product id[{0}]
product.parent.type.validation=[fr]Parent product type should not be [{0}]
product.root.already.exist=[fr]Root product already exists with product name {0} in this hierarchy
product.child.already.exist=[fr]A Child product with name [{0}] already exists in parent product [{1}]
product.children.exists=[fr]Product [{0}] has child products under it.
product.identifier.already.exist=[fr]Product with the identifier [{0}] already exists

## Json Related
json.data.valid.error=[fr]Json Data is not valid

## Pagination
filter.key.not.valid=[fr]filter key is not valid, Allowed keys {0}
sort.key.not.valid=[fr]Sort key is invalid, Allowed keys {0}
sort.not.valid=[fr]please provide unique/valid sort string like [key]_[operation], key can be: {0} operation can be {1}
pagination.order.by=[fr]Value of orderBy should be any of [{0}]
filter.not.valid=[fr]please provide valid filter string like [key][operation][value], key can be: {0} operation can be {1}
pagination.per.page=[fr]The perPage value should be a non zero positive integer
pagination.page=[fr]The page value should be a non zero positive integer

inventory.transfer.count.is.zero=[fr]Inventory transfer count is zero
inventory.transfer.serialnumber.count.is.zero=[fr]Transfer count is zero

inventory.serialized.start.no.invalid=[fr]Start number must be smaller than end number
inventory.serialized.start.end.no.invalid=[fr]Start number and end number should not be null or 0
inventory.serialized.start.no.negative=[fr]Start number should not be less than 0
inventory.serialized.end.no.negative=[fr]End number should not be less than 0
inventory.serialized.serial.number.duplicate=[fr]Serial number should be unique
inventory.serialized.serial.unique=[fr]Serial number must be unique for serialized inventory
inventory.serialized.serial.numeric=[fr]Only numeric serials are allowed for productSKU [{0}]
inventory.serialized.batch.id.duplicate=[fr]Batch id {0} is already assigned
inventory.serialized.batch.id.unique=[fr]Different product SKU cannot be placed in single batch
inventory.serialized.secondary.serial.not.valid=[fr]Secondary serial idType is invalid
inventory.serialized.primary.secondary.serial.not.unique=[fr]Primary and secondary serials must be unique

inventory.not.found.for.user.and.product.sku=[fr]Inventory not found for productSKU [{0}]
some.ranges.are.out.of.box.range=[fr]Some ranges are falling into multiple groups
boxes.created.successfully=[fr]Boxes created successfully
inventory.box.invalid.range=[fr]Provided ranges are invalid
inventory.box.invalid.serial=[fr]Following Serial(s) does not exist in inventory for Owner [{0}]: {1}
inventory.box.invalid.owner=[fr]Owner not found with given value [{0}]
inventory.box.range.not.available.for.owner=[fr]complete range [{0}-{1}] is not available for owner {2}
inventory.box.invalid.product.for.serial=[fr]SerialsRequests only works with Serialised Products
inventory.box.empty.serial.list=[fr]Serials list must not be empty
inventory.box.range.not.found=No ranges found for split
message.startSerial.split.box.invalid=[fr]Start serial must be non-negative
message.endSerial.split.box.invalid=[fr]End serial must be non-negative
message.success=[fr]Success
message.reserve.quantity.must.be.positive=Quantity must be greater than zero
productSKU.id.not.blank=[fr]ProductSku should not be null
inventory.reserve.productSKU.not.valid=[fr]Product identifier is invalid
inventory.request.body.updateFields.ownerId.value.invalid=[fr]Invalid owner id is provided to update
invalid.owner.id.provided=[fr]Invalid owner id is being provided
invalid.employee.id.provided=[fr]'employeeId' does not exist in system
message.reserve.invalid.owner.id.provided=[fr]Owner id [{0}] is invalid
message.intransit.invalid.owner.id.provided=[fr]Owner id [{0}] is invalid
inventory.orderId.empty= Order Id cannot be empty

message.inventory.full.import.failure=Inventory insertion aborted due to failure
message.inventory.import.success=[fr]Inventory import successful
message.inventory.import.fail.on.error=Inventory insertion successful until failure occurred
message.inventory.import.skip.on.error=Inventory insertion successful by skipping invalid records
invalid.product.type.provided=Product type is not supported
message.validation.batchId.not.null=External batchId property is missing
message.validation.batchId.length=External batchId length is invalid
message.validation.importType.not.null=Property importType is missing
message.validation.importType.invalid=Property importType is invalid
message.validation.inventories.not.null=Property inventories is missing
message.validation.inventories.not.empty=Property inventories is empty
inventory.serialized.serial.too.long=serialNo should not exceed 40 characters
inventory.serialized.condition.type.not.correct=inventoryCondition type is not correct

message.importId.is.missing=batchId is missing
message.importId.is.empty=batchId is empty
message.status.is.missing=status is missing
message.status.is.empty=status is empty
message.data.is.null=inventories is missing
message.data.is.empty=inventories is empty
inventories.updated.successfully=Inventories updated successfully
inventories.update.failure=Inventories update failed
inventories.updated.with.invalid.records=Only valid Inventories are being updated
message.from.state.is.invalid=Inventory state {0} is invalid
message.status.is.invalid=Status {0} is invalid
message.serial.number.is.duplicate=Serial number is already processed in another record too.
message.serial.is.not.available=Inventory is not available
message.productSKU.is.not.matched=ProductSKU is mismatched
meaasge.inventories.not.found=inventories not found with given sku: {0} and range: {1}
meaasge.inventories.not.found.with.state=Inventories not found with given sku: {0}, range: {1} and state: {2}
message.serial.number.is.invalid=Serial number is invalid
message.serials.is.empty=Serials are empty or null
product.code.not.found=Product not found with given product code
product.id.not.fetched=Could not fetch products from pms
serial.not.found=[fr]Serial {0} is not found with given product code {1}
message.validation.AddInventoryRequest.idType.size=idType size should be less than 255
message.validation.AddReceivedInventoryModel.idType.size=idType size should be less than 255
required.datetime.format=Please provide the valid date format: {0} for {1}
required.integer.format=Please provide the valid integer value to {0}
inventory.transfer.serial.not.owned.by.owner=Inventory does not belong to owner
transfer.inventory.multiple.batch=Only one owner is supported per call
inventories.not.found=No inventory found
invalid.from.state=Invalid from-state
invalid.serial.number=Serial number should be valid number
inventory.transfer.refNo.not.owned.by.owner=Inventory does not belong to owner for refNo
inventory.transfer.invalid.from.state=Invalid from-state
inventory.locationId.not.blank=LocationId should not be blank or null
inventory.having.invalid.state=Some inventory item's are not in valid state
inventory.no.maching.value=No matching inventory found with given values
inventory.invalid.state.id=No valid state found for the serial ids. Transition failed for inventories: {0}
inventory.invalid.state.non.serial.id=No valid state found for the inventories. Transition failed for inventories: {0}
inventory.invalid.from.owner.type=Invalid from owner type
inventory.invalid.to.owner.type=Invalid to owner type
inventory.owner.batch.id.unique=One owner id assigned to single batch
inventory.serialized.already.exist=Serialized inventory item already exist with productSKU[{0}] and serial number[{1}]
invalid.workflow.transition=Unable to find valid state transition
inventory.invalid.data.attribute=Inventory attribute name cannot be empty
message.error.productsku.split.to.trackable.only=Only trackable-non-serialized product-sku are valid
message.error.productsku.split.to.serialized.only=Only trackable-non-serialized & serialized product-sku are valid

inventory.is.already.reserved.for.subscriber=[fr]Inventory is already reserved for range [{0} - {1}]
inventory.is.already.sold.to.subscriber=[fr]Inventory is already sold for range [{0} - {1}]
range.is.invalid.for.reserve.inventory=Range is invalid [{0} - {1}]

inventory.offset.numeric.invalid=Page index must not be less than or equal to zero!
inventory.limit.numeric.invalid=Page size must not be less than one!
inventory.boxes.not.found=No boxes found against given criteria
inventory.serialized.startNo.endNo.serialNo.null=StartNo/EndNo/SerialNo must be provided

inventory.trackable.non.serialized.range.exist= Inventory is already exist between this range [{0} - {1}]
inventory.batch.id.exist=Inventory is already exist with provided batchId

inventories.delete.success={0} Inventories deleted successfully.
inventory.bulktransfer.duplicate.refNo=Request contains duplicate refNo: {0}

# SearchInventoriesByOwner
inventory.transaction.type.not.valid=[fr]The transaction type is not valid
message.quantity.must.be.positive=[fr]Quantity must be positive
inventory.range.not.applicable.for.alphanumeric=[fr]Range is not applicable for alphanumeric serials
search.criteria.all.fields.empty=All the fields should not be null or empty
inventory.number.format.exception=Invalid Numeric value provided

#BoxSummaryRequest
inventory.box.summary.boxids.empty=boxIds cannot be empty or null

################## Validations ###################

GenericValidationPrefix=Following field(s) is/are invalid:
inventoryRequest.ownerId.message=ownerId
inventoryRequest.startSerial.message=startSerial
inventoryCountRequest.productSKUs.message=productSKUs
inventoryCountRequest.childResellerIds.message=childResellerIds
productSKU.field.message=field
filter.key.message=key
filter.value.message=value
getBoxRequest.ownerId.message=ownerId
getBoxRequest.employeeId.message=employeeId
addInventoryRequest.productId.message=productId
addInventoryRequest.productSKU.message=productSKU
secondarySerial.idType.message=idType
secondarySerial.id.message=id
addReceivedInventoryRequest.owner.message=owner
addReceivedInventoryRequest.orderId.message=orderId
addReceivedInventoryModel.productSKU.message=productSKU
addReceivedInventoryModel.batchId.message=batchId
bulkInventoryRequest.importType.message=importType
bulkInventoryRequest.batchId.message=batchId
bulkInventoryDto.owner.message=owner
bulkInventoryDto.stateName.message=stateName
updateInventoryRequest.owner.message=owner
updateInventoryRequest.productId.message=productId
searchModel.inventoryIdType.message=inventoryIdType
range.inventoryFrom.message=inventoryFrom
fields.location.message=location
dataAttribute.name.message=name
bulkInventoryUploadRequest.type.message=type
bulkInventoryUploadRequest.ownerId.message=ownerId
resellerTypeBasedRequest.productSKUs.message=productSKUs
assignMsisdnRequest.msisdn.message=msisdn
assignMsisdnRequest.simnumber.message=simnumber
createBoxRequest.newBoxId.message=newBoxId
createBoxRequest.ownerId.message=ownerId
serialNumberRangeRequest.startSerialNo.message=startSerialNo
serialsRequest.serials.message=serials
inventoryBulkUpdateRequest.batchId.message=batchId
inventoryBulkUpdateRequest.importType.message=importType
inventoryItemBulkUpdate.productSKU.message=productSKU
rangeData.startSerial.message=startSerial
party.id.message=id
searchInventoriesByOwnerCriteriaRequest.productSku.message=productSku
productDetailsByOwnerDTO.resellerId.message=resellerId
productInfoByReseller.productCode.message=productCode
reserveInventoryRequest.refNo.message=refNo
inventoryRowRequest.productId.message=productId
transferInventoryRequest.refNo.message=refNo
batchData.productIdentifier.message=productIdentifier
serialNumberData.productId.message=productId
serialRangeData.productId.message=productId
releaseInventoryRequest.refNo.message=refNo
item.productIdentifier.message=productIdentifier
inventoryOperationsRequest.toOwnerId.message=toOwnerId
searchProductData.productSKU.message=productSKU
searchInventoryData.searchType.message=searchType
addPlanRequest.planId.message=planId
updatePlanRequest.planName.message=planName

inventory.box.multiple.parent.exist=Box [{0}] can't have multiple parents: [{1}], [{2}]
inventory.serial.invalid.length=Serial number must be of length: [{0}]