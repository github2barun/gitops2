## Inventory Related
inventory.type.not.found=Inventory type not found for: {0}
inventory.table.not.found=Inventory table not found for type: {0}
inventory.not.found=No inventory found for provided search criteria.
inventory.non.serialized.already.exist=Non serialized inventory item already exist with productId[{0}], ownerId[{1}], locationId[{2}], employeeId[{3}] and data[{4}]
inventory.non.serialized.error=Unable to create non serialized inventory: {0}
inventory.item.not.found=Inventory item not found with type {0} , id {1}
inventory.item.not.available.for.serial=No inventory found for serial {0}
inventory.get.exception=Got exception: {0}
inventory.update.exception=Unable to update non serialized inventory with inventory id: {0}
inventory.delete.exception=Unable to delete non serialized inventory: {0}
inventory.non.serialized.fetch.success=Non-Serialized Inventory fetched Successfully
inventory.non.serialized.create.success=Non-Serialized Inventory created Successfully
inventory.non.serialized.update.success=Non-Serialized Inventory updated Successfully
inventory.non.serialized.delete.success=Non-Serialized Inventory deleted Successfully
inventory.non.serialized.uom.not.blank=Unit of measurement cannot be empty for non-serialized inventory
inventory.non.serialized.quantity.valid=Quantity should be positive for non-serialized inventory
inventory.serialized.fetch.success=Serialized Inventory fetched Successfully
inventory.serialized.create.success=Serialized Inventory created Successfully
inventory.serialized.update.success=Serialized Inventory updated Successfully
inventory.serialized.delete.success=Serialized Inventory deleted Successfully
inventory.serialized.serial.valid=Serial number cannot be empty for serialized inventory
inventory.serialized.fetch.pattern.not.found=No stock found with the pattern
inventory.serialized.inventoryIdType.valid=inventoryIdType can't be empty
inventory.serial.duplicate.found=An inventory already exists with same product-id[{0}] and serial number[{1}] combination
inventory.trackable.non.serialized.startno.not.valid=Start serial number [{0}] for trackable non serialized inventory is invalid
inventory.trackable.non.serialized.endno.not.valid=End serial number [{0}] for trackable non serialized inventory is invalid
inventory.trackable.non.serialized.range.not.valid=End serial number [{0}] should not be less than start no [{1}] for trackable non serialized inventory
inventory.trackable.non.serialized.already.exist=Non serialized inventory item already exist with productId[{0}], ownerId[{1}], locationId[{2}], batchId[{3}], start serial[{4}] and end serial[{5}]
inventory.trackable.non.serialized.fetch.success=Trackable-Non-Serialized Inventory fetched Successfully
inventory.trackable.non.serialized.create.success=Trackable-Non-Serialized Inventory created Successfully
inventory.trackable.non.serialized.update.success=Trackable-Non-Serialized Inventory updated Successfully
inventory.trackable.non.serialized.delete.success=Trackable-Non-Serialized Inventory deleted Successfully
inventory.filter.key.invalid=Filter Key {0} is not valid
inventory.sort.key.invalid=Sort Key {0} is not valid
owner.inventory.not.found= Could not find inventory with given owner and state name
inventory.not.owned.by.logged.in.user=Inventory doesn't belong to logged in user
child.resellers.inventory.view.not.allowed=Child resellers inventory view is not allowed
child.reseller.ids.not.valid=Invalid child reseller ids provided
dms.api.call.failure=Unable to fetch child resellers
dms.api.call.for.reseller.data.failure=Unable to fetch reseller data
vms.api.call.failure=Unable to update products status in VMS
inventory.upload.error=Failed to upload inventory
## Inventory Request
inventory.type.not.valid=The provided inventory type [{0}] is not valid
inventory.serialized.serial.not.blank=The serial number can not be blank for an inventory of type [serialized]
inventory.nonserialized.quantity.not.blank=The quantity for any inventory of type[nonserialized] can not be less than zero
inventory.product.not.blank=productId for any inventory can not be zero
inventory.product.min.value=productId for any inventory has to be a non zero positive number
inventory.ownerId.not.blank=OwnerId should not be blank
inventory.initiatorOwner.not.blank=Initiator Owner should not be blank
inventory.onConsignment.not.blank=OnConsignment should not be blank
inventory.product.not.empty=The 'productId' can not be empty
inventory.lot.not.empty=The 'batchId' for the inventory can not be blank
inventory.type.not.empty=The 'type' of inventory can not be blank
inventory.owner.not.empty=The 'Owner' can not be empty for any inventory
inventory.uom.max.length=The 'uom' string length should be less than or equal to 10
inventory.uom.not.empty=The 'uom' of non-serialized inventory can not be blank
inventory.quantity.max=The 'quantity' should be less than 10^15
inventory.state.name.not.empty=The 'stateName' can not be empty for any inventory
inventory.id.not.blank=The 'inventoryId' can not be blank or less than one
inventory.fetch.error=Error in fetching inventory with id [{0}]
inventory.add.error=Error in adding inventory
inventory.update.error=Error in updating inventory
inventory.delete.error=Error in deleting inventory
inventory.fetch-all.success=All inventories are fetched successfully for product-id [{0}]
inventory.fetch.success=All inventories are fetched successfully
inventory.fetch-all.error=Error in fetching all inventories for product-id [{0}]
inventory.summary.fetch.success=Inventory summary fetched successfully
inventory.summary.fetch.error=Error in fetching inventory summary
inventory.fetch.loggedin.user.token.invalid=Invalid token provided
inventory.fetchChildStock.not.valid=fetchChildStock must be provided
inventory.childResellerIds.not.valid=childResellerIds must be provided
inventory.childResellerIds.mismatch=Some childResellerIds are invalid
inventory.header.system.token.not.valid=system-token value must be provided
inventory.header.authorization.not.valid=authorization value must be provided
inventory.validation.error= The inventory does not belong to logged in user
inventory.query.param.page.size.invalid=specifies the page size
inventory.query.param.page.number.invalid=specifies the page number
inventory.not.available=Requested inventory is not available
inventory.invalid.new.boxId=new box id in request is in already assigned.
inventory.not.found.createBox=No serial number found to create box
inventory.body.request.productSKU.invalid=productSKU must be provided
inventory.body.request.updateFields.invalid=updateFields is missing
inventory.body.request.searchFields.invalid=searchFields is missing
inventory.request.body.searchFields.productSKU.invalid=productSKU must be provided
inventory.search.product.invalid=productSKU or productCode must be provided
inventory.search.searchType.not.null=searchType must be provided
inventory.search.fetch.success=fetched all results matching search criteria
inventory.request.body.updateFields.invalid=updateFields is missing
inventory.request.body.searchFields.invalid=searchFields is missing
inventory.request.body.searchFields.inventoryIdType.invalid=inventoryIDType must be provided
inventory.request.body.searchFields.serials.invalid=serials field must be provided
inventory.request.body.searchFields.range.invalid=range must be provided
inventory.request.body.searchFields.quantity.invalid=quantity must be provided
inventory.request.body.searchFields.batchIds.invalid=batchIds must be provided
inventory.request.body.searchFields.inventoryIds.invalid=inventoryIds must be provided
inventory.request.body.searchFields.status.invalid=searchFields(status) must be provided
inventory.request.body.searchFields.ownerId.invalid=searchFields(ownerId) must be provided
inventory.request.body.range.inventoryFrom.invalid=inventory_From should not be null
inventory.request.body.range.inventoryTo.invalid=inventory_To should not be null
inventory.request.body.range.invalid.values=range_To should not greater than range_From
inventory.request.body.updatedFields.ownerId.invalid=ownerId must be provided
inventory.request.body.updatedFields.location.invalid=location must be provided
inventory.request.body.updatedFields.status.invalid=status must be provided
inventory.request.body.updatedFields.location.length.invalid=location length is invalid
inventory.request.body.updatedFields.ownerId.length.invalid=ownerId length is invalid
inventory.request.body.updatedFields.status.length.invalid=status length is invalid
inventory.request.body.updatedFields.updateReason.length.invalid=Reason can not be more than 1000 chars
inventory.request.body.searchFields.status.not.found=searchFields(status) is invalid
inventory.request.body.searchFields.invalid.values=From updating fields(ownerId,location,status), at least one must be provided
inventory.request.body.searchFields.range.values=inventory_From must be less than inventory_To
inventory.request.body.searchFields.serial.or.batch.id.allowed=From search params(serials,batch id\'s, range) only one must be provided
inventory.request.from.and.toState.are.invalid=No valid state found for the serial ids. Transition failed for serial: {0}
inventory.request.state.transitions.not.found=No state transitions found for products
inventory.request.body.searchFields.ownerId.value.invalid=Invalid owner id provided in search criteria
serialized.inventory.update.reason.invalid.length=updateReason length is invalid
config.property.is.missing= Config property [{0}] is missing
inventory.filter.invalid= filters must be provided
inventory.request.filter.key.invalid=filters key should not be null
inventory.request.param.order.by.invalid=orderBy value is must be provided
inventory.request.param.group.by.not.allowed= Group by field [{0}] is not allowed
inventory.request.param.order.invalid=order value is invalid
inventory.request.body.filter.column.not.configured=filter column [{0}] is not configured
inventory.request.param.order.by.not.allowed= Order by field [{0}] is not allowed
inventory.request.filter.operation.invalid=Operation must be provided for filter
inventory.request.body.filter.operation.not.configured=Operation [{0}] is not configured
inventory.request.body.filter.startSerial.endSerial.quantity= [{0}] must be integer
sim.number.not.valid=Please provide valid sim number
productid.not.valid=ProductSKU is invalid
inventory.request.body.filter.operation.not.allowed=Operation [{0}] is not allowed for Quantity,StartSerial and EndSerial
inventory.request.body.filter.operation.not.allowed.input= Operation [{0}] is not allowed for [{1}]
invalid.workflow.state=There is not state transition from {0} to Sold state
msisdn.not.valid= Msisdn [{0}] is invalid
msisdn.brandCode.not.valid=MSISDN brand code [{1}] is mismatched with SIM brand code[{0}]
inventory.request.body.filter.invalid.format=Provided filter {0}:{1} has invalid format. Required format is {2}

## Owner Controller
owner.id.not.blank=Owner id can not be blank
owner.not.found=No owner found with ownerId [{0}]
owner.not.active=Owner is not active for ownerId [{0}]
owner.fetch-inventory-count.success=Inventory count successfully fetched for owner [{0}]

## Location Related
owner.locations.multiple.found=Multiple locations found for owner[{0}], please provide location id
owner.location.already.registered=Location id[{0}] is already registered with some owner[{1}]
owner.locations.not.found=No Location found with locationId [{0}]

## Bulk Upload
import.file.not.provided=The File is not provided
import.file.extension.validation=File Should be in CSV format
jobName.not.blank=JobName should not be blank
action.not.blank=Action should not be blank
action.not.valid=The provided action is not valid
import.job.upload.success=Import started. You can check latest status for File {0}
import.job.fetch.success=The Job {0} is fetched successfully.
import.job.resource.data.error=Error occurred in fetching resource uploaded data
import.job.upload.error=Error in bulk upload of inventory
import.job.status.fetch.error=Error in fetching the job status for [{0}]
import.job.approve.error=Error in approving the inventory upload for job [{0}]
import.job.reject.error=Error in rejecting the inventory upload for job [{0}]
import.jobs.fetch.error=Error in fetching all imported jobs
import.jobs.fetch.all.success=All Jobs fetched successfully
import.job.approve.success=Import approved for File {0}
import.job.reject.success=Import rejected for File {0}
import.job.status.fetch.success=Successfully fetched import status for File {0}
import.owner.error=Error occurred in fetching owner data
inventory.activation.resource.data.error=Error occurred in fetching resource uploaded data
import.activation.upload.success=Activation Import started. You can check latest status for File {0}

## Inventory Operations
inventory.reserve.failed=Failed to reserve inventory for the product [{0}]
inventory.operation.error=Error performing operation on inventory
inventory.serialized.stage.changed.to.intransit=Stock associated with the reference number[{0}] and having the provided product-inventory identifiers have been marked in-transit under ownership of [{1}]
inventory.serialized.stage.changed.to.delivered=Stock associated with the reference number[{0}] and having the provided product-inventory identifiers have been delivered to owner[{1}] at configured location {2}
inventory.fetch.by.refNo.success=Successfully fetched inventory for refNo: {0}
inventory.serialized.stage.update.error=The actual update count [{0}] and the expected update count [{1}] do not match
inventory.serialized.stage.changed.to.deposited=Stock associated with the reference number[{0}] and having the provided product-inventory identifiers have been deposited to owner[{1}] at configured location {2}
inventory.transfer.serialrange.count.is.zero=Transfer inventory count is zero for productId [{0}] and SerialRange start from [{1}] to [{2}]
inventory.reserve.refNo.not.blank=The 'refNo' for the reserve request should not be blank
inventory.reserve.not.empty=Inventory Reserve list should not be empty
inventory.reserve.type.not.valid=Inventory reserveType is not valid, Valid value are SERIAL/BATCH/RANGE/FIFO/LIFO.
inventory.reserve.quantity.not.found=Quantity is not found at row [{0}]
inventory.reserve.batchId.not.found=Batch is not found at row [{0}]
inventory.trackable.non.serialized.not.found=Inventory not found
inventory.non.serialized.not.found=Inventory not found
inventory.non.serialized.quantity.not.available=Requested quantity is not available.
nonserialized.inventory.reserve.type.not.valid=Inventory reserveType is not valid for non serialized, Valid value are NON_SERIALIZE/FIFO/LIFO.
inventory.trackable.non.serialized.invalid.range=Provided invalid range criteria for reserve
inventory.reserve.product.duplicate=Duplicate product id at row [{0}]
inventory.reserve.quantity.serial.not.found=Both Quantity or Serial nos not found at row [{0}]
inventory.reserve.serial.not.blank=Serial no should not be blank at row [{0}]
inventory.reserve.serial.duplicate.found=Some serial no {0} found duplicate, provide unique serial no
inventory.reserve.quantity.serial.count.not.matched=Quantity must be equal to the inventory being reserved
inventory.reserve.failed.due.to.quantity.mismatch=Inventory count is not available to reserve, required: {0}  || available: {1}
party.id.not.blank=seller id should not be blank
seller.not.null=Seller Information should not be empty
inventory.reserve.error=Failed to reserve inventory for the refNo [{0}]
inventory.reserve.success=Inventory reserved successfully for the refNo [{0}]
inventory.reserve.range.not.valid=Start serial number [{0}] should not be greater than end serial number [{1}] in Ranges
inventory.reserve.range.not.parsable=Only numeric serials are supported for ReserveType RANGE
inventory.release.error=Error in releasing inventories for refNo [{0}]
inventory.release.refNo.not.blank=The 'refNo' for the release request should not be empty
inventory.release.inventory.duplicate.found=Some inventoryIds {0} found duplicate, provide unique inventory id
inventory.release.inventoryIds.not.empty=The 'inventoryIds' for the release request should not be empty
inventory.release.success=Inventory released successfully for the refNo [{0}]
inventory.error.mark.intransit=Error in marking inventory as in-transit
inventory.error.mark.delivery=Error in delivering inventory
inventory.error.mark.deposit=Error in depositing inventory at collector
inventory.fetch.by.refNo.error=Error while fetching inventory by refNo [{0}]
inventory.transfer.fetched.success=Inventory Transfers fetched successfully
inventory.transfer.error=Error in transferring inventory
inventory.transfer.success=Transfer successful. Ref ID: {0}
inventory.batch.list.not.zero=RefNo or Batch list or serial list or serial range list count should not be zero
inventory.batch.id.list.not.zero=Batch id list count should not be zero
inventory.serial.no.list.not.zero=Serial number list count should not be zero
inventory.serial.no.range.start.end.list.not.zero=Serial number range must have valid start-end serial number
inventory.transfer.fetched.error=Error in fetching transfers history
inventory.operations.item.identifier.not.blank=The identifier for the product should not be empty
inventory.operations.item.id.not.null=The identifier for inventory against some product can not be empty
inventory.operations.item.id.min.value=the identifier for the inventory can not be zero or negative number
inventory.operations.item.refNo.not.blank=can not update stock without some reference no
inventory.list.product.type.invalid=List of product-identifiers contains products of invalid type: [{0}]
inventory.reserve.product.state.not.exist=Either some states {0} or some products {1} are not exist
inventory.search.type.not.valid=The search type is not valid
inventory.against.ref.not.found=Refno[{0}] has no inventory marked against it
inventory.release.product.sku.error=error in releasing inventory for productSKU[{0}]. reverting changes.
inventory.item.not.available=No Inventory available for product SKU {0} to reserve
inventory.operation.reserve.not.allowed=Reserve inventory operation not allowed on product [{0}]
inventory.inventory-count.error=Unable to fetch inventories count

############## Request Validation Message ############
## Workflow Request
workflow.name.not.blank=The name of the workflow can not be blank
workflow.states.not.empty=The 'states' should not be empty, at-least two states are required
workflow.transition.not.empty=The 'transition' should not be empty, at-least one transition is required
workflow.state.name.not.blank=The name of the workflow state can not be blank
workflow.transition.from.not.blank=The 'From' state in the transition can not be blank
workflow.transition.to.not.blank=The 'To' state in the transition can not be blank
workflow.two.states=At-least two workflow-states are required in states
workflow.one.transition=At-least one transition is required
workflow.unique.state=State name should be unique in a workflow
workflow.transition.self.loop=Self-loop transition 'From' [{0}] and 'To' [{1}] is not allowed
workflow.transition.self.loop.not.exist=Self-loop transition 'From' [{0}] and 'To' [{1}] is not found system
workflow.id.not.blank=The workflowId should be greater than zero
workflow.state.id.not.blank=The workflowStateId should be greater than zero
workflow.fetch.success=Workflow fetch successfully
workflow.create.success=Workflow create successfully
workflow.update.success=Workflow update successfully
workflows.fetch.success=All workflows fetched successfully
workflow.state.update.success=Workflow state updated successfully
workflow.fetch.error=Error in fetching workflow details
workflow.add.error=Error in adding workflow details
workflow.update.error=Error in updating workflow with id [{0}]
workflow.state.update.error=Error in updating state of workflow with id [{0}]
workflow.delete.error=Unable to delete [{0}], as some products are using this workflow
workflow.delete.success=Workflow Deleted Successfully
workflow.already.exist=Workflow name[{0}] already exists, choose different name
workflow.not.exist=Workflow [{0}] does not exist
workflow.state.already.exist=Workflow State [{0}] already exists in this workflow
workflow.state.id.not.exist=WorkflowState [{0}] does not exist
workflow.state.name.not.exist=WorkflowState [{0}] does not exist in the product workflow
workflow.transition.from.state.not.exist=Transition 'From' [{0}] state not found in workflow state
workflow.transition.to.state.not.exist=Transition 'To' [{0}] state not found in workflow state
workflow.remove.transition.not.exist=Remove transition[From: {0}, To: {1}] does not exist
workflow.op.transition.from.not.exist={0} transition 'From' state doesn't exist
workflow.op.transition.to.not.exist={0} transition 'To' state doesn't exist
workflow.state.id.not.exist.in.workflow=Either workflowId or workflow state doesn't exist in this workflow
workflow.state.not.exist=No states were found.
workflow.transition.reservation.not.found=valid transitions for reservation do not exist for productSKU [{0}]
workflow.transition.transfer.not.found=No valid transition found for transfer operation for workflow [{0}]
workflow.transition.transfer.notfound=No valid transition found for transfer operation
workflow.product.sku.not.found=Workflows for some products are missing in the system [{0}]"
workflow.release.stage.not.found=no release stage found for workflow [{0}]
workflow.state.not.found=state [{0}] not found for workflow with id [{1}]
workflow.state.product.sku.not.found=State [{0}] not found for products [{1}]
workflow.transition.product.sku.from.state.not.exist=No valid transitions found for product[{0}] from current state [{1}]
## Tax Related
tax.type.not.blank=Tax should not be blank
tax.percent.value.invalid=invalid percent tax value provided, provide like 12.45
tax.fixed.value.invalid=invalid fixed amount tax provided, provide like 25.00
tax.percent.fixed.not.zero=Both Fields (percentValue, fixedValue) should not be 0.00
tax.percent.fixed.validation=Both Fields (percentValue, fixedValue) should not be greater than 0.00
tax.fetch.error=Error in fetching tax with id [{0}]
tax.fetch.all.error=Error in fetching all taxes
tax.add.error=Error in adding tax
tax.update.error=Error in updating tax with id [{0}]
tax.delete.error=Error in deleting tax with id [{0}]
tax.fetch.success=Tax fetch successfully
tax.create.success=Tax create successfully
tax.update.success=Tax update successfully
tax.fetch.all.success=All taxes fetched successfully
tax.not.exist=Tax [{0}] does not exist
tax.delete.success=Tax Deleted Successfully
tax.exist.in.product=Tax [{0}] is already associated with some products

## Product Request
product.workflow.parent.not.blank=Both Field (ParentId, WorkflowId) should not be blank
product.name.not.blank=The product 'name' can not be blank
product.type.not.valid=The product 'type' is not valid
product.price.value.invalid=Invalid unit price provided, provide like 999.99
product.uom.max.length=The 'uom' string length should be less than or equal to 20
product.price.not.blank=The product 'unitPrice' should not be blank for product type [{0}]
product.uom.not.blank=The product 'uom' should not be blank for product type [{0}]
product.id.not.blank=The 'productId' can not be blank or less than zero
product.new.parent.not.blank=The 'newParentId' can not be blank or less than one
product.move.request.validation=ProductId and Parent productId can not be same
product.fetch.success=Product fetch successfully
product.update.success=Product update successfully
product.create.success=Product create successfully
product.fetch.error=Error in fetching details of product [{0}]
product.add.error=Error in adding product
product.update.error=Error in updating product [{0}]
product.delete.error=Error in deleting product [{0}]
product.move.error=Error in moving product [{0}]
products.fetch.error=Error in fetching products for productId {0}
products.fetch.success=Products fetched successfully for respective productIds.
products.fetch-all.error=Error in fetching all products list.
products.fetch-all.success=All products fetched successfully.
product.fetch.duplicate.ids=The product ids {0} should be unique
product.identifier.not.blank=The product identifier should not be blank for product type [{0}]
product.moved.success=Product-id [{0}] is moved successfully
product.child.not.found=This product-id [{0}] is not found as a leaf product
product.delete.success=Product is deleted successfully [{0}]
product.inventory.exist.error=There are some inventory associated with this product [{0}]
product.not.found=Product not found with product sku [{0}]
product.active.not.found=Active Product not found with product id[{0}]
product.parent.type.validation=Parent product type should not be [{0}]
product.root.already.exist=Root product already exists with product name {0} in this hierarchy
product.child.already.exist=A Child product with name [{0}] already exists in parent product [{1}]
product.children.exists=Product [{0}] has child products under it.
product.identifier.already.exist=Product with the identifier [{0}] already exists

## Json Related
json.data.valid.error=Json Data is not valid

## Pagination
filter.key.not.valid=filter key is not valid, Allowed keys {0}
sort.key.not.valid=Sort key is invalid, Allowed keys {0}
sort.not.valid=please provide unique/valid sort string like [key]_[operation], key can be: {0} operation can be {1}
pagination.order.by=Value of orderBy should be any of [{0}]
filter.not.valid=please provide valid filter string like [key][operation][value], key can be: {0} operation can be {1}
pagination.per.page=The perPage value should be a non zero positive integer
pagination.page=The page value should be a non zero positive integer

inventory.transfer.count.is.zero=Inventory transfer count is zero
inventory.transfer.serialnumber.count.is.zero=Transfer count is zero

inventory.serialized.start.no.invalid=Start number must be smaller than end number
inventory.serialized.start.end.no.invalid=Start number and end number should not be null or 0
inventory.serialized.start.no.negative=Start number should not be less than 0
inventory.serialized.end.no.negative=End number should not be less than 0
inventory.serialized.serial.number.duplicate=Serial number should be unique
inventory.serialized.serial.unique=Serial number must be unique for serialized inventory
inventory.serialized.serial.numeric=Only numeric serials are allowed for productSKU [{0}]
inventory.serialized.batch.id.duplicate=Batch id {0} is already assigned
inventory.serialized.batch.id.unique=Different product SKU cannot be placed in single batch
inventory.serialized.secondary.serial.not.valid=Secondary serial idType is invalid
inventory.serialized.primary.secondary.serial.not.unique=Primary and secondary serials must be unique

inventory.not.found.for.user.and.product.sku=Inventory not found for productSKU [{0}]
some.ranges.are.out.of.box.range=Some ranges are falling into multiple groups
boxes.created.successfully=Boxes created successfully
inventory.box.invalid.range=Provided ranges are invalid
inventory.box.invalid.serial=Following Serial(s) does not exist in inventory for Owner [{0}]: {1}
inventory.box.invalid.owner=Owner not found with given value [{0}]
inventory.box.range.not.available.for.owner=complete range [{0}-{1}] is not available for owner {2}
inventory.box.invalid.product.for.serial=SerialsRequests only works with Serialised Products
inventory.box.empty.serial.list=Serials list must not be empty
inventory.box.range.not.found=No ranges found for split
message.startSerial.split.box.invalid=Start serial must be non-negative
message.endSerial.split.box.invalid=End serial must be non-negative
message.success=Success
message.reserve.quantity.must.be.positive=Quantity must be positive
productSKU.id.not.blank=ProductSku should not be null
inventory.reserve.productSKU.not.valid=Product identifier is invalid
resellerId.is.invalid=ResellerId is invalid
resellerPath.is.invalid=Reseller data has invalid path
parent.reseller.ids.are.invalid=Parent reseller id's are invalid
inventory.request.body.updateFields.ownerId.value.invalid=Invalid owner id is provided to update
invalid.owner.id.provided=Invalid owner id is being provided
invalid.employee.id.provided='employeeId' does not exist in system
message.reserve.invalid.owner.id.provided=Owner id [{0}] is invalid
message.intransit.invalid.owner.id.provided=Owner id [{0}] is invalid
inventory.orderId.empty= Order Id cannot be empty
inventory.initiator.ownerId.not.blank=Initiator should not be blank
invalid.product.type= product type is not correct
invalid.product.type.serialized= product type is not correct. serialized must be included
invalid.product.type.serialized.or.trackablenonserialized= product type is not correct. serialized or trackable_nonserialized must be included
invalid.product.type.trackablenonserialized= product type is not correct. trackable_nonserialized must be included

inventory.transfer.invalid.from.state=Invalid from-state
inventory.transfer.refNo.not.owned.by.owner=Inventory does not belong to owner for refNo

message.inventory.import.success=Inventory import successful
message.inventory.full.import.failure=Inventory insertion aborted due to failure
message.inventory.import.fail.on.error=Inventory insertion successful until failure occurred
message.inventory.import.skip.on.error=Inventory insertion successful by skipping invalid records
invalid.product.type.provided=Product type is not supported
message.validation.batchId.not.null=External batchId property is missing
message.validation.batchId.length=External batchId length is invalid
message.validation.importType.not.null=Property importType is missing
message.validation.importType.invalid=Property importType is invalid
message.validation.inventories.not.null=Property inventories is missing
message.validation.inventories.not.empty=Property inventories is empty
inventory.serialized.serial.too.long=serialNo should not exceed 40 characters
inventory.serialized.condition.type.not.correct=inventoryCondition type is not correct

message.importId.is.missing=batchId is missing
message.importId.is.empty=batchId is empty
message.status.is.missing=status is missing
message.status.is.empty=status is empty
message.data.is.null=inventories is missing
message.data.is.empty=inventories is empty
inventories.updated.successfully=Inventories updated successfully
inventories.updated.with.invalid.records=Only valid Inventories are being updated
message.from.state.is.invalid=Inventory state {0} is invalid
message.status.is.invalid=Status {0} is invalid
message.serial.number.is.duplicate=Serial number is already processed in another record too.
message.serial.is.not.available=Inventory is not available
message.productSKU.is.not.matched=ProductSKU is mismatched
message.serial.number.is.invalid=Serial number is invalid
message.serials.is.empty=Serials are empty or null
product.code.not.found=Product not found with given product code
serial.not.found=Serial {0} is not found with given product code {1}

message.validation.AddInventoryRequest.idType.size=idType size should be less than 255
message.validation.AddReceivedInventoryModel.idType.size=idType size should be less than 255
required.datetime.format=Please provide the valid date format: {0} for {1}
required.integer.format=Please provide the valid integer value to {0}
inventory.transfer.serial.not.owned.by.owner=Inventory does not belong to owner
transfer.inventory.multiple.batch=Only one owner is supported per call
inventories.not.found=No inventory found
invalid.from.state=Invalid from-state
invalid.serial.number=Serial number should be valid number
inventory.locationId.not.blank=LocationId should not be blank or null
inventory.having.invalid.state=Some inventory item's are not in valid state: [{0}]
inventory.no.maching.value=No matching inventory found with given values
inventory.invalid.state.id=No valid state found for the serial ids. Transition failed for inventories: {0}
inventory.invalid.state.non.serial.id=No valid state found for the inventories. Transition failed for inventories: {0}


inventory.locationId.not.blank=LocationId should not be blank or null
inventory.having.invalid.state=Some inventory item's are not in valid state
inventory.no.maching.value=No matching inventory found with given values

inventory.invalid.from.owner.type=Invalid from owner type
inventory.invalid.to.owner.type=Invalid to owner type
inventory.owner.batch.id.unique=One owner id assigned to single batch
inventory.serialized.already.exist=Serialized inventory item already exist with productSKU[{0}] and serial number[{1}]
invalid.workflow.transition=Unable to find valid state transition
inventory.invalid.data.attribute=Inventory attribute name cannot be empty
message.error.productsku.split.to.trackable.only=Only trackable-non-serialized product-sku are valid
message.error.productsku.split.to.serialized.only=Only trackable-non-serialized & serialized product-sku are valid

inventory.is.already.reserved.for.subscriber=Inventory is already reserved for range [{0} - {1}]
inventory.is.already.sold.to.subscriber=Inventory is already sold for range [{0} - {1}]
range.is.invalid.for.reserve.inventory=Range is invalid [{0} - {1}]

inventory.offset.numeric.invalid=Page index must not be less than or equal to zero!
inventory.limit.numeric.invalid=Page size must not be less than one!
inventory.boxes.not.found=No boxes found against given criteria
inventory.serialized.startNo.endNo.serialNo.null=StartNo/EndNo/SerialNo must be provided

inventory.trackable.non.serialized.range.exist= Inventory is already exist between this range [{0} - {1}]
inventory.batch.id.exist=Inventory is already exist with provided batchId

inventories.delete.success={0} Inventories deleted successfully.
inventories.not.found=No inventories found for provided search criteria.

dms.api.call.for.bulk.reseller.data.failure=Resolve resellers failed. Party IDs: [{0}]
workflow.state.not.exist.for.stage=No states were found for stage [{0}}]
reseller.stock.fetched.successfully=Inventory count fetched successfully for the requested product and resellers

reseller.not.active=Reseller id [{0}] is not active
reseller.user.not.found=Reseller user not found with reseller id: [{0}]
reseller.valid.user.not.found=No valid user found for reseller id: [{0}]

inventory.box.multiple.parent.exist=Box [{0}] can''t have multiple parents: [{1}], [{2}]
inventory.serial.invalid.length=Serial number must be of length: [{0}]